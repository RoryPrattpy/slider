
/Users/admin/CTD_2023/slider/target/5.3.0/argon/slider.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .module_info  00000018  000b4000  000b4000  00004000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .dynalib      00000004  000b4018  000b4018  00004018  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .text         00001238  000b401c  000b401c  0000401c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .note.gnu.build-id 00000024  000b5254  000b5254  00005254  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .data         00000070  2003e638  000b5278  0000e638  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .bss          00000148  2003e6a8  2003e6a8  0001e6a8  2**2
                  ALLOC
  6 .backup       00000004  2003f400  000b52e8  0000f400  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .module_info_product 00000006  000b52ec  000b52ec  000152ec  2**0
                  ALLOC
  8 .module_info_suffix 00000024  000b52f2  000b52f2  000152f2  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  9 .module_info_crc 00000004  000b5316  000b5316  00015316  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
 10 .debug_info   000f82aa  00000000  00000000  0001531a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 0000fcf1  00000000  00000000  0010d5c4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_loc    00032d26  00000000  00000000  0011d2b5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_aranges 000026a0  00000000  00000000  0014ffdb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_ranges 00009840  00000000  00000000  0015267b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_macro  00034970  00000000  00000000  0015bebb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_line   00035bd5  00000000  00000000  0019082b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_str    00135333  00000000  00000000  001c6400  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_frame  00006b14  00000000  00000000  002fb734  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

000b401c <strlen>:
   b401c:	4603      	mov	r3, r0
   b401e:	f813 2b01 	ldrb.w	r2, [r3], #1
   b4022:	2a00      	cmp	r2, #0
   b4024:	d1fb      	bne.n	b401e <strlen+0x2>
   b4026:	1a18      	subs	r0, r3, r0
   b4028:	3801      	subs	r0, #1
   b402a:	4770      	bx	lr

000b402c <module_user_pre_init>:
/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   b402c:	4809      	ldr	r0, [pc, #36]	; (b4054 <module_user_pre_init+0x28>)
   b402e:	490a      	ldr	r1, [pc, #40]	; (b4058 <module_user_pre_init+0x2c>)
   b4030:	4288      	cmp	r0, r1
void* module_user_pre_init() {
   b4032:	b508      	push	{r3, lr}
    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   b4034:	d005      	beq.n	b4042 <module_user_pre_init+0x16>
   b4036:	4a09      	ldr	r2, [pc, #36]	; (b405c <module_user_pre_init+0x30>)
   b4038:	4282      	cmp	r2, r0
   b403a:	d002      	beq.n	b4042 <module_user_pre_init+0x16>
    {
        memcpy(&link_global_data_start, &link_global_data_initial_values, link_global_data_size);
   b403c:	1a12      	subs	r2, r2, r0
   b403e:	f000 ff51 	bl	b4ee4 <memcpy>
    }

    memset(&link_bss_location, 0, link_bss_size );
   b4042:	4807      	ldr	r0, [pc, #28]	; (b4060 <module_user_pre_init+0x34>)
   b4044:	4a07      	ldr	r2, [pc, #28]	; (b4064 <module_user_pre_init+0x38>)
   b4046:	2100      	movs	r1, #0
   b4048:	1a12      	subs	r2, r2, r0
   b404a:	f000 ff59 	bl	b4f00 <memset>
    return &link_global_data_start;
}
   b404e:	4801      	ldr	r0, [pc, #4]	; (b4054 <module_user_pre_init+0x28>)
   b4050:	bd08      	pop	{r3, pc}
   b4052:	bf00      	nop
   b4054:	2003e638 	.word	0x2003e638
   b4058:	000b5278 	.word	0x000b5278
   b405c:	2003e6a8 	.word	0x2003e6a8
   b4060:	2003e6a8 	.word	0x2003e6a8
   b4064:	2003e7f0 	.word	0x2003e7f0

000b4068 <module_user_init>:
extern constructor_ptr_t link_constructors_location[];
extern constructor_ptr_t link_constructors_end;
#define link_constructors_size   ((unsigned long)&link_constructors_end  -  (unsigned long)&link_constructors_location )

void module_user_init()
{
   b4068:	b570      	push	{r4, r5, r6, lr}
    module_user_init_hook();

    // invoke constructors
    for (size_t ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   b406a:	4e07      	ldr	r6, [pc, #28]	; (b4088 <module_user_init+0x20>)
   b406c:	4c07      	ldr	r4, [pc, #28]	; (b408c <module_user_init+0x24>)
    module_user_init_hook();
   b406e:	f000 fe01 	bl	b4c74 <module_user_init_hook>
    for (size_t ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   b4072:	1ba4      	subs	r4, r4, r6
   b4074:	08a4      	lsrs	r4, r4, #2
   b4076:	2500      	movs	r5, #0
   b4078:	42ac      	cmp	r4, r5
   b407a:	d100      	bne.n	b407e <module_user_init+0x16>
    {
        link_constructors_location[ctor_num]();
    }
}
   b407c:	bd70      	pop	{r4, r5, r6, pc}
        link_constructors_location[ctor_num]();
   b407e:	f856 3b04 	ldr.w	r3, [r6], #4
   b4082:	4798      	blx	r3
    for (size_t ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   b4084:	3501      	adds	r5, #1
   b4086:	e7f7      	b.n	b4078 <module_user_init+0x10>
   b4088:	000b5230 	.word	0x000b5230
   b408c:	000b5254 	.word	0x000b5254

000b4090 <module_user_setup>:

/**
 * Export these functions with a fuller name so they don't clash with the setup/loop wrappers in the system module.
 */
void module_user_setup() {
    setup();
   b4090:	f000 b813 	b.w	b40ba <setup>

000b4094 <module_user_loop>:
}

void module_user_loop() {
   b4094:	b508      	push	{r3, lr}
    loop();
   b4096:	f000 f82b 	bl	b40f0 <loop>
    _post_loop();
}
   b409a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    _post_loop();
   b409e:	f000 bda1 	b.w	b4be4 <_post_loop>

000b40a2 <_Znaj>:
   b40a2:	f000 ba09 	b.w	b44b8 <malloc>

000b40a6 <_ZdlPvj>:
	free(p);
}

void operator delete(void *p, size_t size)
{
	free(p);
   b40a6:	f000 ba0f 	b.w	b44c8 <free>

000b40aa <__cxa_guard_acquire>:

/* Provide default implemenation for __cxa_guard_acquire() and
 * __cxa_guard_release(). Note: these must be revisited if a multitasking
 * OS is ported to this platform. */
__extension__ typedef int __guard __attribute__((mode (__DI__)));
int __cxa_guard_acquire(__guard *g) {return !*(char *)(g);};
   b40aa:	7800      	ldrb	r0, [r0, #0]
   b40ac:	fab0 f080 	clz	r0, r0
   b40b0:	0940      	lsrs	r0, r0, #5
   b40b2:	4770      	bx	lr

000b40b4 <__cxa_guard_release>:
void __cxa_guard_release (__guard *g) {*(char *)g = 1;};
   b40b4:	2301      	movs	r3, #1
   b40b6:	7003      	strb	r3, [r0, #0]
   b40b8:	4770      	bx	lr

000b40ba <setup>:
SYSTEM_THREAD(ENABLED);

int lowest = 4095;
int highest = 0;

void setup() {
   b40ba:	b508      	push	{r3, lr}
  pinMode(A0, INPUT);
   b40bc:	2100      	movs	r1, #0
   b40be:	2013      	movs	r0, #19
   b40c0:	f000 fe48 	bl	b4d54 <pinMode>
  pinMode(D4, OUTPUT);
   b40c4:	2101      	movs	r1, #1
   b40c6:	2004      	movs	r0, #4
   b40c8:	f000 fe44 	bl	b4d54 <pinMode>
  pinMode(D5, OUTPUT);
   b40cc:	2101      	movs	r1, #1
   b40ce:	2005      	movs	r0, #5
   b40d0:	f000 fe40 	bl	b4d54 <pinMode>
  pinMode(D6, OUTPUT);
   b40d4:	2101      	movs	r1, #1
   b40d6:	2006      	movs	r0, #6
   b40d8:	f000 fe3c 	bl	b4d54 <pinMode>
  pinMode(D7, OUTPUT);
   b40dc:	2101      	movs	r1, #1
   b40de:	2007      	movs	r0, #7
   b40e0:	f000 fe38 	bl	b4d54 <pinMode>
  pinMode(D8, OUTPUT);
}
   b40e4:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  pinMode(D8, OUTPUT);
   b40e8:	2101      	movs	r1, #1
   b40ea:	2008      	movs	r0, #8
   b40ec:	f000 be32 	b.w	b4d54 <pinMode>

000b40f0 <loop>:

void loop() {
   b40f0:	b537      	push	{r0, r1, r2, r4, r5, lr}
  lowest = min(analogRead(A0), lowest);
   b40f2:	2013      	movs	r0, #19
   b40f4:	f000 fe58 	bl	b4da8 <analogRead>
   b40f8:	4c15      	ldr	r4, [pc, #84]	; (b4150 <loop+0x60>)
  highest = max(analogRead(A0), highest);
   b40fa:	4d16      	ldr	r5, [pc, #88]	; (b4154 <loop+0x64>)
  lowest = min(analogRead(A0), lowest);
   b40fc:	6823      	ldr	r3, [r4, #0]
   b40fe:	4283      	cmp	r3, r0
   b4100:	bfd4      	ite	le
   b4102:	6023      	strle	r3, [r4, #0]
   b4104:	6020      	strgt	r0, [r4, #0]
  highest = max(analogRead(A0), highest);
   b4106:	2013      	movs	r0, #19
   b4108:	f000 fe4e 	bl	b4da8 <analogRead>
   b410c:	682b      	ldr	r3, [r5, #0]
   b410e:	4283      	cmp	r3, r0
   b4110:	bfac      	ite	ge
   b4112:	602b      	strge	r3, [r5, #0]
   b4114:	6028      	strlt	r0, [r5, #0]
  int pin = map(analogRead(A0), lowest, highest, 4, 9);
   b4116:	2013      	movs	r0, #19
   b4118:	f000 fe46 	bl	b4da8 <analogRead>
   b411c:	2309      	movs	r3, #9
   b411e:	9300      	str	r3, [sp, #0]
   b4120:	682a      	ldr	r2, [r5, #0]
   b4122:	6821      	ldr	r1, [r4, #0]
   b4124:	2304      	movs	r3, #4
   b4126:	f000 f9e7 	bl	b44f8 <_Z3mapiiiii>
  digitalWrite(pin, 1);
   b412a:	b284      	uxth	r4, r0
   b412c:	4620      	mov	r0, r4
   b412e:	2101      	movs	r1, #1
   b4130:	f000 fe21 	bl	b4d76 <digitalWrite>
  digitalWrite(pin - 1, 0);
   b4134:	1e60      	subs	r0, r4, #1
   b4136:	2100      	movs	r1, #0
   b4138:	b280      	uxth	r0, r0
   b413a:	f000 fe1c 	bl	b4d76 <digitalWrite>
  digitalWrite(pin + 1, 0);
   b413e:	1c60      	adds	r0, r4, #1
   b4140:	2100      	movs	r1, #0
   b4142:	b280      	uxth	r0, r0
   b4144:	b003      	add	sp, #12
   b4146:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
  digitalWrite(pin + 1, 0);
   b414a:	f000 be14 	b.w	b4d76 <digitalWrite>
   b414e:	bf00      	nop
   b4150:	2003e638 	.word	0x2003e638
   b4154:	2003e6b4 	.word	0x2003e6b4

000b4158 <_GLOBAL__sub_I_SystemMode>:
   b4158:	b510      	push	{r4, lr}

class SystemSleepResult {
public:
    SystemSleepResult()
            : wakeupSource_(nullptr),
              error_(SYSTEM_ERROR_NONE) {
   b415a:	4b07      	ldr	r3, [pc, #28]	; (b4178 <_GLOBAL__sub_I_SystemMode+0x20>)
    SleepResult() {}
   b415c:	4a07      	ldr	r2, [pc, #28]	; (b417c <_GLOBAL__sub_I_SystemMode+0x24>)
   b415e:	609a      	str	r2, [r3, #8]
              error_(SYSTEM_ERROR_NONE) {
   b4160:	2400      	movs	r4, #0
   b4162:	e9c3 4400 	strd	r4, r4, [r3]

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
   b4166:	2003      	movs	r0, #3
   b4168:	f000 f91a 	bl	b43a0 <set_system_mode>
SYSTEM_THREAD(ENABLED);
   b416c:	4621      	mov	r1, r4
   b416e:	2001      	movs	r0, #1
   b4170:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
SYSTEM_THREAD(ENABLED);
   b4174:	f000 b91c 	b.w	b43b0 <system_thread_set_state>
   b4178:	2003e6a8 	.word	0x2003e6a8
   b417c:	ffff0000 	.word	0xffff0000

000b4180 <os_mutex_recursive_create>:
DYNALIB_FN(13, hal_concurrent, os_mutex_destroy, int(os_mutex_t))
DYNALIB_FN(14, hal_concurrent, os_mutex_lock, int(os_mutex_t))
DYNALIB_FN(15, hal_concurrent, os_mutex_trylock, int(os_mutex_t))
DYNALIB_FN(16, hal_concurrent, os_mutex_unlock, int(os_mutex_t))

DYNALIB_FN(17, hal_concurrent, os_mutex_recursive_create, int(os_mutex_recursive_t*))
   b4180:	b508      	push	{r3, lr}
   b4182:	4b02      	ldr	r3, [pc, #8]	; (b418c <os_mutex_recursive_create+0xc>)
   b4184:	681b      	ldr	r3, [r3, #0]
   b4186:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   b4188:	9301      	str	r3, [sp, #4]
   b418a:	bd08      	pop	{r3, pc}
   b418c:	00030248 	.word	0x00030248

000b4190 <HAL_RNG_GetRandomNumber>:

DYNALIB_BEGIN(hal)

#if PLATFORM_ID > PLATFORM_GCC
DYNALIB_FN(0, hal, HAL_RNG_Configuration, void(void))
DYNALIB_FN(1, hal, HAL_RNG_GetRandomNumber, uint32_t(void))
   b4190:	b508      	push	{r3, lr}
   b4192:	4b02      	ldr	r3, [pc, #8]	; (b419c <HAL_RNG_GetRandomNumber+0xc>)
   b4194:	681b      	ldr	r3, [r3, #0]
   b4196:	685b      	ldr	r3, [r3, #4]
   b4198:	9301      	str	r3, [sp, #4]
   b419a:	bd08      	pop	{r3, pc}
   b419c:	00030218 	.word	0x00030218

000b41a0 <HAL_Timer_Get_Milli_Seconds>:
#endif // PLATFORM_ID > PLATFORM_GCC

DYNALIB_FN(BASE_IDX + 0, hal, HAL_Delay_Milliseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 1, hal, HAL_Delay_Microseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal, HAL_Timer_Get_Micro_Seconds, system_tick_t(void))
DYNALIB_FN(BASE_IDX + 3, hal, HAL_Timer_Get_Milli_Seconds, system_tick_t(void))
   b41a0:	b508      	push	{r3, lr}
   b41a2:	4b02      	ldr	r3, [pc, #8]	; (b41ac <HAL_Timer_Get_Milli_Seconds+0xc>)
   b41a4:	681b      	ldr	r3, [r3, #0]
   b41a6:	695b      	ldr	r3, [r3, #20]
   b41a8:	9301      	str	r3, [sp, #4]
   b41aa:	bd08      	pop	{r3, pc}
   b41ac:	00030218 	.word	0x00030218

000b41b0 <hal_pin_validate_function>:
// GNINRAW

DYNALIB_BEGIN(hal_gpio)

DYNALIB_FN(0, hal_gpio, hal_pin_map, hal_pin_info_t*(void))
DYNALIB_FN(1, hal_gpio, hal_pin_validate_function, PinFunction(hal_pin_t, PinFunction))
   b41b0:	b508      	push	{r3, lr}
   b41b2:	4b02      	ldr	r3, [pc, #8]	; (b41bc <hal_pin_validate_function+0xc>)
   b41b4:	681b      	ldr	r3, [r3, #0]
   b41b6:	685b      	ldr	r3, [r3, #4]
   b41b8:	9301      	str	r3, [sp, #4]
   b41ba:	bd08      	pop	{r3, pc}
   b41bc:	0003022c 	.word	0x0003022c

000b41c0 <hal_gpio_mode>:
DYNALIB_FN(2, hal_gpio, hal_gpio_mode, void(hal_pin_t, PinMode))
   b41c0:	b508      	push	{r3, lr}
   b41c2:	4b02      	ldr	r3, [pc, #8]	; (b41cc <hal_gpio_mode+0xc>)
   b41c4:	681b      	ldr	r3, [r3, #0]
   b41c6:	689b      	ldr	r3, [r3, #8]
   b41c8:	9301      	str	r3, [sp, #4]
   b41ca:	bd08      	pop	{r3, pc}
   b41cc:	0003022c 	.word	0x0003022c

000b41d0 <hal_gpio_get_mode>:
DYNALIB_FN(3, hal_gpio, hal_gpio_get_mode, PinMode(hal_pin_t))
   b41d0:	b508      	push	{r3, lr}
   b41d2:	4b02      	ldr	r3, [pc, #8]	; (b41dc <hal_gpio_get_mode+0xc>)
   b41d4:	681b      	ldr	r3, [r3, #0]
   b41d6:	68db      	ldr	r3, [r3, #12]
   b41d8:	9301      	str	r3, [sp, #4]
   b41da:	bd08      	pop	{r3, pc}
   b41dc:	0003022c 	.word	0x0003022c

000b41e0 <hal_gpio_write>:
DYNALIB_FN(4, hal_gpio, hal_gpio_write, void(hal_pin_t, uint8_t))
   b41e0:	b508      	push	{r3, lr}
   b41e2:	4b02      	ldr	r3, [pc, #8]	; (b41ec <hal_gpio_write+0xc>)
   b41e4:	681b      	ldr	r3, [r3, #0]
   b41e6:	691b      	ldr	r3, [r3, #16]
   b41e8:	9301      	str	r3, [sp, #4]
   b41ea:	bd08      	pop	{r3, pc}
   b41ec:	0003022c 	.word	0x0003022c

000b41f0 <hal_adc_read>:
DYNALIB_FN(8, hal_gpio, hal_interrupt_enable_all, void(void))
DYNALIB_FN(9, hal_gpio, hal_interrupt_disable_all, void(void))

DYNALIB_FN(10, hal_gpio, HAL_DAC_Write, void(hal_pin_t, uint16_t))
DYNALIB_FN(11, hal_gpio, hal_adc_set_sample_time, void(uint8_t))
DYNALIB_FN(12, hal_gpio, hal_adc_read, int32_t(uint16_t))
   b41f0:	b508      	push	{r3, lr}
   b41f2:	4b02      	ldr	r3, [pc, #8]	; (b41fc <hal_adc_read+0xc>)
   b41f4:	681b      	ldr	r3, [r3, #0]
   b41f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   b41f8:	9301      	str	r3, [sp, #4]
   b41fa:	bd08      	pop	{r3, pc}
   b41fc:	0003022c 	.word	0x0003022c

000b4200 <hal_i2c_write>:
DYNALIB_FN(3, hal_i2c, hal_i2c_begin, void(hal_i2c_interface_t, hal_i2c_mode_t, uint8_t, void*))
DYNALIB_FN(4, hal_i2c, hal_i2c_end, void(hal_i2c_interface_t, void*))
DYNALIB_FN(5, hal_i2c, hal_i2c_request, uint32_t(hal_i2c_interface_t, uint8_t, uint8_t, uint8_t, void*))
DYNALIB_FN(6, hal_i2c, hal_i2c_begin_transmission, void(hal_i2c_interface_t, uint8_t, const hal_i2c_transmission_config_t*))
DYNALIB_FN(7, hal_i2c, hal_i2c_end_transmission, uint8_t(hal_i2c_interface_t, uint8_t, void*))
DYNALIB_FN(8, hal_i2c, hal_i2c_write, uint32_t(hal_i2c_interface_t, uint8_t, void*))
   b4200:	b508      	push	{r3, lr}
   b4202:	4b02      	ldr	r3, [pc, #8]	; (b420c <hal_i2c_write+0xc>)
   b4204:	681b      	ldr	r3, [r3, #0]
   b4206:	6a1b      	ldr	r3, [r3, #32]
   b4208:	9301      	str	r3, [sp, #4]
   b420a:	bd08      	pop	{r3, pc}
   b420c:	00030228 	.word	0x00030228

000b4210 <hal_i2c_available>:
DYNALIB_FN(9, hal_i2c, hal_i2c_available, int32_t(hal_i2c_interface_t, void*))
   b4210:	b508      	push	{r3, lr}
   b4212:	4b02      	ldr	r3, [pc, #8]	; (b421c <hal_i2c_available+0xc>)
   b4214:	681b      	ldr	r3, [r3, #0]
   b4216:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   b4218:	9301      	str	r3, [sp, #4]
   b421a:	bd08      	pop	{r3, pc}
   b421c:	00030228 	.word	0x00030228

000b4220 <hal_i2c_read>:
DYNALIB_FN(10, hal_i2c, hal_i2c_read, int32_t(hal_i2c_interface_t, void*))
   b4220:	b508      	push	{r3, lr}
   b4222:	4b02      	ldr	r3, [pc, #8]	; (b422c <hal_i2c_read+0xc>)
   b4224:	681b      	ldr	r3, [r3, #0]
   b4226:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   b4228:	9301      	str	r3, [sp, #4]
   b422a:	bd08      	pop	{r3, pc}
   b422c:	00030228 	.word	0x00030228

000b4230 <hal_i2c_peek>:
DYNALIB_FN(11, hal_i2c, hal_i2c_peek, int32_t(hal_i2c_interface_t, void*))
   b4230:	b508      	push	{r3, lr}
   b4232:	4b02      	ldr	r3, [pc, #8]	; (b423c <hal_i2c_peek+0xc>)
   b4234:	681b      	ldr	r3, [r3, #0]
   b4236:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   b4238:	9301      	str	r3, [sp, #4]
   b423a:	bd08      	pop	{r3, pc}
   b423c:	00030228 	.word	0x00030228

000b4240 <hal_i2c_flush>:
DYNALIB_FN(12, hal_i2c, hal_i2c_flush, void(hal_i2c_interface_t, void*))
   b4240:	b508      	push	{r3, lr}
   b4242:	4b02      	ldr	r3, [pc, #8]	; (b424c <hal_i2c_flush+0xc>)
   b4244:	681b      	ldr	r3, [r3, #0]
   b4246:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   b4248:	9301      	str	r3, [sp, #4]
   b424a:	bd08      	pop	{r3, pc}
   b424c:	00030228 	.word	0x00030228

000b4250 <hal_i2c_is_enabled>:
DYNALIB_FN(13, hal_i2c, hal_i2c_is_enabled, bool(hal_i2c_interface_t, void*))
   b4250:	b508      	push	{r3, lr}
   b4252:	4b02      	ldr	r3, [pc, #8]	; (b425c <hal_i2c_is_enabled+0xc>)
   b4254:	681b      	ldr	r3, [r3, #0]
   b4256:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   b4258:	9301      	str	r3, [sp, #4]
   b425a:	bd08      	pop	{r3, pc}
   b425c:	00030228 	.word	0x00030228

000b4260 <hal_i2c_init>:
DYNALIB_FN(14, hal_i2c, hal_i2c_set_callback_on_received, void(hal_i2c_interface_t, void(*)(int), void*))
DYNALIB_FN(15, hal_i2c, hal_i2c_set_callback_on_requested, void(hal_i2c_interface_t, void(*)(void), void*))
DYNALIB_FN(16, hal_i2c, hal_i2c_init, int(hal_i2c_interface_t, const hal_i2c_config_t*))
   b4260:	b508      	push	{r3, lr}
   b4262:	4b02      	ldr	r3, [pc, #8]	; (b426c <hal_i2c_init+0xc>)
   b4264:	681b      	ldr	r3, [r3, #0]
   b4266:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b4268:	9301      	str	r3, [sp, #4]
   b426a:	bd08      	pop	{r3, pc}
   b426c:	00030228 	.word	0x00030228

000b4270 <inet_inet_ntop>:
DYNALIB_FN(0, hal_inet, inet_inet_addr, in_addr_t(const char*))
DYNALIB_FN(1, hal_inet, inet_inet_aton, int(const char*, struct in_addr*))
DYNALIB_FN(2, hal_inet, inet_inet_network, in_addr_t(const char*))
DYNALIB_FN(3, hal_inet, inet_inet_ntoa, char*(struct in_addr))
DYNALIB_FN(4, hal_inet, inet_inet_ntoa_r, char*(struct in_addr, char*, socklen_t))
DYNALIB_FN(5, hal_inet, inet_inet_ntop, const char*(int, const void*, char*, socklen_t))
   b4270:	b508      	push	{r3, lr}
   b4272:	4b02      	ldr	r3, [pc, #8]	; (b427c <inet_inet_ntop+0xc>)
   b4274:	681b      	ldr	r3, [r3, #0]
   b4276:	695b      	ldr	r3, [r3, #20]
   b4278:	9301      	str	r3, [sp, #4]
   b427a:	bd08      	pop	{r3, pc}
   b427c:	00030264 	.word	0x00030264

000b4280 <netdb_freeaddrinfo>:

DYNALIB_BEGIN(hal_netdb)

DYNALIB_FN(0, hal_netdb, netdb_gethostbyname, struct hostent*(const char*))
DYNALIB_FN(1, hal_netdb, netdb_gethostbyname_r, int(const char*, struct hostent*, char*, size_t, struct hostent**, int*))
DYNALIB_FN(2, hal_netdb, netdb_freeaddrinfo, void(struct addrinfo*))
   b4280:	b508      	push	{r3, lr}
   b4282:	4b02      	ldr	r3, [pc, #8]	; (b428c <netdb_freeaddrinfo+0xc>)
   b4284:	681b      	ldr	r3, [r3, #0]
   b4286:	689b      	ldr	r3, [r3, #8]
   b4288:	9301      	str	r3, [sp, #4]
   b428a:	bd08      	pop	{r3, pc}
   b428c:	00030268 	.word	0x00030268

000b4290 <netdb_getaddrinfo>:
DYNALIB_FN(3, hal_netdb, netdb_getaddrinfo, int(const char*, const char*, const struct addrinfo*, struct addrinfo**))
   b4290:	b508      	push	{r3, lr}
   b4292:	4b02      	ldr	r3, [pc, #8]	; (b429c <netdb_getaddrinfo+0xc>)
   b4294:	681b      	ldr	r3, [r3, #0]
   b4296:	68db      	ldr	r3, [r3, #12]
   b4298:	9301      	str	r3, [sp, #4]
   b429a:	bd08      	pop	{r3, pc}
   b429c:	00030268 	.word	0x00030268

000b42a0 <hal_spi_init>:
DYNALIB_FN(2, hal_spi, hal_spi_set_bit_order, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(3, hal_spi, hal_spi_set_data_mode, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(4, hal_spi, hal_spi_set_clock_divider, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(5, hal_spi, hal_spi_transfer, uint16_t(hal_spi_interface_t, uint16_t))
DYNALIB_FN(6, hal_spi, hal_spi_is_enabled_deprecated, bool(void))
DYNALIB_FN(7, hal_spi, hal_spi_init, void(hal_spi_interface_t))
   b42a0:	b508      	push	{r3, lr}
   b42a2:	4b02      	ldr	r3, [pc, #8]	; (b42ac <hal_spi_init+0xc>)
   b42a4:	681b      	ldr	r3, [r3, #0]
   b42a6:	69db      	ldr	r3, [r3, #28]
   b42a8:	9301      	str	r3, [sp, #4]
   b42aa:	bd08      	pop	{r3, pc}
   b42ac:	00030230 	.word	0x00030230

000b42b0 <hal_spi_is_enabled>:
DYNALIB_FN(8, hal_spi, hal_spi_is_enabled, bool(hal_spi_interface_t))
   b42b0:	b508      	push	{r3, lr}
   b42b2:	4b02      	ldr	r3, [pc, #8]	; (b42bc <hal_spi_is_enabled+0xc>)
   b42b4:	681b      	ldr	r3, [r3, #0]
   b42b6:	6a1b      	ldr	r3, [r3, #32]
   b42b8:	9301      	str	r3, [sp, #4]
   b42ba:	bd08      	pop	{r3, pc}
   b42bc:	00030230 	.word	0x00030230

000b42c0 <hal_usart_write>:
#endif

DYNALIB_FN(BASE_IDX + 0, hal_usart, hal_usart_init, void(hal_usart_interface_t, hal_usart_ring_buffer_t*, hal_usart_ring_buffer_t*))
DYNALIB_FN(BASE_IDX + 1, hal_usart, hal_usart_begin, void(hal_usart_interface_t, uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal_usart, hal_usart_end, void(hal_usart_interface_t))
DYNALIB_FN(BASE_IDX + 3, hal_usart, hal_usart_write, uint32_t(hal_usart_interface_t, uint8_t))
   b42c0:	b508      	push	{r3, lr}
   b42c2:	4b02      	ldr	r3, [pc, #8]	; (b42cc <hal_usart_write+0xc>)
   b42c4:	681b      	ldr	r3, [r3, #0]
   b42c6:	68db      	ldr	r3, [r3, #12]
   b42c8:	9301      	str	r3, [sp, #4]
   b42ca:	bd08      	pop	{r3, pc}
   b42cc:	0003023c 	.word	0x0003023c

000b42d0 <hal_usart_available>:
DYNALIB_FN(BASE_IDX + 4, hal_usart, hal_usart_available, int32_t(hal_usart_interface_t))
   b42d0:	b508      	push	{r3, lr}
   b42d2:	4b02      	ldr	r3, [pc, #8]	; (b42dc <hal_usart_available+0xc>)
   b42d4:	681b      	ldr	r3, [r3, #0]
   b42d6:	691b      	ldr	r3, [r3, #16]
   b42d8:	9301      	str	r3, [sp, #4]
   b42da:	bd08      	pop	{r3, pc}
   b42dc:	0003023c 	.word	0x0003023c

000b42e0 <hal_usart_read>:
DYNALIB_FN(BASE_IDX + 5, hal_usart, hal_usart_read, int32_t(hal_usart_interface_t))
   b42e0:	b508      	push	{r3, lr}
   b42e2:	4b02      	ldr	r3, [pc, #8]	; (b42ec <hal_usart_read+0xc>)
   b42e4:	681b      	ldr	r3, [r3, #0]
   b42e6:	695b      	ldr	r3, [r3, #20]
   b42e8:	9301      	str	r3, [sp, #4]
   b42ea:	bd08      	pop	{r3, pc}
   b42ec:	0003023c 	.word	0x0003023c

000b42f0 <hal_usart_peek>:
DYNALIB_FN(BASE_IDX + 6, hal_usart, hal_usart_peek, int32_t(hal_usart_interface_t))
   b42f0:	b508      	push	{r3, lr}
   b42f2:	4b02      	ldr	r3, [pc, #8]	; (b42fc <hal_usart_peek+0xc>)
   b42f4:	681b      	ldr	r3, [r3, #0]
   b42f6:	699b      	ldr	r3, [r3, #24]
   b42f8:	9301      	str	r3, [sp, #4]
   b42fa:	bd08      	pop	{r3, pc}
   b42fc:	0003023c 	.word	0x0003023c

000b4300 <hal_usart_flush>:
DYNALIB_FN(BASE_IDX + 7, hal_usart, hal_usart_flush, void(hal_usart_interface_t))
   b4300:	b508      	push	{r3, lr}
   b4302:	4b02      	ldr	r3, [pc, #8]	; (b430c <hal_usart_flush+0xc>)
   b4304:	681b      	ldr	r3, [r3, #0]
   b4306:	69db      	ldr	r3, [r3, #28]
   b4308:	9301      	str	r3, [sp, #4]
   b430a:	bd08      	pop	{r3, pc}
   b430c:	0003023c 	.word	0x0003023c

000b4310 <hal_usart_is_enabled>:
DYNALIB_FN(BASE_IDX + 8, hal_usart, hal_usart_is_enabled, bool(hal_usart_interface_t))
   b4310:	b508      	push	{r3, lr}
   b4312:	4b02      	ldr	r3, [pc, #8]	; (b431c <hal_usart_is_enabled+0xc>)
   b4314:	681b      	ldr	r3, [r3, #0]
   b4316:	6a1b      	ldr	r3, [r3, #32]
   b4318:	9301      	str	r3, [sp, #4]
   b431a:	bd08      	pop	{r3, pc}
   b431c:	0003023c 	.word	0x0003023c

000b4320 <hal_usart_available_data_for_write>:
DYNALIB_FN(BASE_IDX + 9, hal_usart, hal_usart_half_duplex, void(hal_usart_interface_t, bool))
DYNALIB_FN(BASE_IDX + 10, hal_usart, hal_usart_available_data_for_write, int32_t(hal_usart_interface_t))
   b4320:	b508      	push	{r3, lr}
   b4322:	4b02      	ldr	r3, [pc, #8]	; (b432c <hal_usart_available_data_for_write+0xc>)
   b4324:	681b      	ldr	r3, [r3, #0]
   b4326:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   b4328:	9301      	str	r3, [sp, #4]
   b432a:	bd08      	pop	{r3, pc}
   b432c:	0003023c 	.word	0x0003023c

000b4330 <hal_usart_init_ex>:
DYNALIB_FN(BASE_IDX2 + 0, hal_usart, hal_usart_begin_config, void(hal_usart_interface_t serial, uint32_t baud, uint32_t config, void *ptr))
DYNALIB_FN(BASE_IDX2 + 1, hal_usart, hal_usart_write_nine_bits, uint32_t(hal_usart_interface_t serial, uint16_t data))
DYNALIB_FN(BASE_IDX2 + 2, hal_usart, hal_usart_send_break, void(hal_usart_interface_t, void*))
DYNALIB_FN(BASE_IDX2 + 3, hal_usart, hal_usart_break_detected, uint8_t(hal_usart_interface_t))
DYNALIB_FN(BASE_IDX2 + 4, hal_usart, hal_usart_sleep, int(hal_usart_interface_t serial, bool, void*))
DYNALIB_FN(BASE_IDX2 + 5, hal_usart, hal_usart_init_ex, int(hal_usart_interface_t, const hal_usart_buffer_config_t*, void*))
   b4330:	b508      	push	{r3, lr}
   b4332:	4b02      	ldr	r3, [pc, #8]	; (b433c <hal_usart_init_ex+0xc>)
   b4334:	681b      	ldr	r3, [r3, #0]
   b4336:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b4338:	9301      	str	r3, [sp, #4]
   b433a:	bd08      	pop	{r3, pc}
   b433c:	0003023c 	.word	0x0003023c

000b4340 <HAL_USB_USART_Init>:
// GNINRAW

DYNALIB_BEGIN(hal_usb)

#ifdef USB_CDC_ENABLE
DYNALIB_FN(0, hal_usb, HAL_USB_USART_Init, void(HAL_USB_USART_Serial, const HAL_USB_USART_Config*))
   b4340:	b508      	push	{r3, lr}
   b4342:	4b02      	ldr	r3, [pc, #8]	; (b434c <HAL_USB_USART_Init+0xc>)
   b4344:	681b      	ldr	r3, [r3, #0]
   b4346:	681b      	ldr	r3, [r3, #0]
   b4348:	9301      	str	r3, [sp, #4]
   b434a:	bd08      	pop	{r3, pc}
   b434c:	0003024c 	.word	0x0003024c

000b4350 <HAL_USB_USART_Available_Data>:
DYNALIB_FN(1, hal_usb, HAL_USB_USART_Begin, void(HAL_USB_USART_Serial, uint32_t, void *))
DYNALIB_FN(2, hal_usb, HAL_USB_USART_End, void(HAL_USB_USART_Serial))
DYNALIB_FN(3, hal_usb, HAL_USB_USART_Baud_Rate, unsigned int(HAL_USB_USART_Serial))
DYNALIB_FN(4, hal_usb, HAL_USB_USART_Available_Data, int32_t(HAL_USB_USART_Serial))
   b4350:	b508      	push	{r3, lr}
   b4352:	4b02      	ldr	r3, [pc, #8]	; (b435c <HAL_USB_USART_Available_Data+0xc>)
   b4354:	681b      	ldr	r3, [r3, #0]
   b4356:	691b      	ldr	r3, [r3, #16]
   b4358:	9301      	str	r3, [sp, #4]
   b435a:	bd08      	pop	{r3, pc}
   b435c:	0003024c 	.word	0x0003024c

000b4360 <HAL_USB_USART_Available_Data_For_Write>:
DYNALIB_FN(5, hal_usb, HAL_USB_USART_Available_Data_For_Write, int32_t(HAL_USB_USART_Serial))
   b4360:	b508      	push	{r3, lr}
   b4362:	4b02      	ldr	r3, [pc, #8]	; (b436c <HAL_USB_USART_Available_Data_For_Write+0xc>)
   b4364:	681b      	ldr	r3, [r3, #0]
   b4366:	695b      	ldr	r3, [r3, #20]
   b4368:	9301      	str	r3, [sp, #4]
   b436a:	bd08      	pop	{r3, pc}
   b436c:	0003024c 	.word	0x0003024c

000b4370 <HAL_USB_USART_Receive_Data>:
DYNALIB_FN(6, hal_usb, HAL_USB_USART_Receive_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   b4370:	b508      	push	{r3, lr}
   b4372:	4b02      	ldr	r3, [pc, #8]	; (b437c <HAL_USB_USART_Receive_Data+0xc>)
   b4374:	681b      	ldr	r3, [r3, #0]
   b4376:	699b      	ldr	r3, [r3, #24]
   b4378:	9301      	str	r3, [sp, #4]
   b437a:	bd08      	pop	{r3, pc}
   b437c:	0003024c 	.word	0x0003024c

000b4380 <HAL_USB_USART_Send_Data>:
DYNALIB_FN(7, hal_usb, HAL_USB_USART_Send_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   b4380:	b508      	push	{r3, lr}
   b4382:	4b02      	ldr	r3, [pc, #8]	; (b438c <HAL_USB_USART_Send_Data+0xc>)
   b4384:	681b      	ldr	r3, [r3, #0]
   b4386:	69db      	ldr	r3, [r3, #28]
   b4388:	9301      	str	r3, [sp, #4]
   b438a:	bd08      	pop	{r3, pc}
   b438c:	0003024c 	.word	0x0003024c

000b4390 <HAL_USB_USART_Flush_Data>:
DYNALIB_FN(8, hal_usb, HAL_USB_USART_Flush_Data, void(HAL_USB_USART_Serial))
   b4390:	b508      	push	{r3, lr}
   b4392:	4b02      	ldr	r3, [pc, #8]	; (b439c <HAL_USB_USART_Flush_Data+0xc>)
   b4394:	681b      	ldr	r3, [r3, #0]
   b4396:	6a1b      	ldr	r3, [r3, #32]
   b4398:	9301      	str	r3, [sp, #4]
   b439a:	bd08      	pop	{r3, pc}
   b439c:	0003024c 	.word	0x0003024c

000b43a0 <set_system_mode>:
#endif

DYNALIB_BEGIN(system)

DYNALIB_FN(0, system, system_mode, System_Mode_TypeDef(void))
DYNALIB_FN(1, system, set_system_mode, void(System_Mode_TypeDef))
   b43a0:	b508      	push	{r3, lr}
   b43a2:	4b02      	ldr	r3, [pc, #8]	; (b43ac <set_system_mode+0xc>)
   b43a4:	681b      	ldr	r3, [r3, #0]
   b43a6:	685b      	ldr	r3, [r3, #4]
   b43a8:	9301      	str	r3, [sp, #4]
   b43aa:	bd08      	pop	{r3, pc}
   b43ac:	00030220 	.word	0x00030220

000b43b0 <system_thread_set_state>:
DYNALIB_FN(6, system, system_sleep, int(Spark_Sleep_TypeDef, long, uint32_t, void*))
DYNALIB_FN(7, system, system_sleep_pin, int(uint16_t, uint16_t, long, uint32_t, void*))
DYNALIB_FN(8, system, system_subscribe_event, int(system_event_t, system_event_handler_t*, SystemEventContext*))
DYNALIB_FN(9, system, system_unsubscribe_event, void(system_event_t, system_event_handler_t*, const SystemEventContext*))
DYNALIB_FN(10, system, system_button_pushed_duration, uint16_t(uint8_t, void*))
DYNALIB_FN(11, system, system_thread_set_state, void(spark::feature::State, void*))
   b43b0:	b508      	push	{r3, lr}
   b43b2:	4b02      	ldr	r3, [pc, #8]	; (b43bc <system_thread_set_state+0xc>)
   b43b4:	681b      	ldr	r3, [r3, #0]
   b43b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   b43b8:	9301      	str	r3, [sp, #4]
   b43ba:	bd08      	pop	{r3, pc}
   b43bc:	00030220 	.word	0x00030220

000b43c0 <system_ctrl_set_app_request_handler>:
DYNALIB_FN(BASE_IDX + 6, system, led_pattern_period, uint16_t(int, int, void*))
DYNALIB_FN(BASE_IDX + 7, system, system_set_tester_handlers, int(system_tester_handlers_t*, void*))
DYNALIB_FN(BASE_IDX + 8, system, system_format_diag_data, int(const uint16_t*, size_t, unsigned, appender_fn, void*, void*))

// Control requests
DYNALIB_FN(BASE_IDX + 9, system, system_ctrl_set_app_request_handler, int(ctrl_request_handler_fn, void*))
   b43c0:	b508      	push	{r3, lr}
   b43c2:	4b03      	ldr	r3, [pc, #12]	; (b43d0 <system_ctrl_set_app_request_handler+0x10>)
   b43c4:	681b      	ldr	r3, [r3, #0]
   b43c6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
   b43ca:	9301      	str	r3, [sp, #4]
   b43cc:	bd08      	pop	{r3, pc}
   b43ce:	0000      	.short	0x0000
   b43d0:	00030220 	.word	0x00030220

000b43d4 <system_ctrl_set_result>:
DYNALIB_FN(BASE_IDX + 10, system, system_ctrl_alloc_reply_data, int(ctrl_request*, size_t, void*))
DYNALIB_FN(BASE_IDX + 11, system, system_ctrl_free_request_data, void(ctrl_request*, void*))
DYNALIB_FN(BASE_IDX + 12, system, system_ctrl_set_result, void(ctrl_request*, int, ctrl_completion_handler_fn, void*, void*))
   b43d4:	b508      	push	{r3, lr}
   b43d6:	4b03      	ldr	r3, [pc, #12]	; (b43e4 <system_ctrl_set_result+0x10>)
   b43d8:	681b      	ldr	r3, [r3, #0]
   b43da:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
   b43de:	9301      	str	r3, [sp, #4]
   b43e0:	bd08      	pop	{r3, pc}
   b43e2:	0000      	.short	0x0000
   b43e4:	00030220 	.word	0x00030220

000b43e8 <spark_set_random_seed_from_cloud_handler>:
DYNALIB_FN(10, system_cloud, spark_unsubscribe, void(void*))
DYNALIB_FN(11, system_cloud, spark_sync_time, bool(void*))
DYNALIB_FN(12, system_cloud, spark_sync_time_pending, bool(void*))
DYNALIB_FN(13, system_cloud, spark_sync_time_last, system_tick_t(time32_t*, time_t*))
DYNALIB_FN(14, system_cloud, spark_set_connection_property, int(unsigned, unsigned, const void*, void*))
DYNALIB_FN(15, system_cloud, spark_set_random_seed_from_cloud_handler, int(void (*handler)(unsigned int), void*))
   b43e8:	b508      	push	{r3, lr}
   b43ea:	4b02      	ldr	r3, [pc, #8]	; (b43f4 <spark_set_random_seed_from_cloud_handler+0xc>)
   b43ec:	681b      	ldr	r3, [r3, #0]
   b43ee:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   b43f0:	9301      	str	r3, [sp, #4]
   b43f2:	bd08      	pop	{r3, pc}
   b43f4:	00030244 	.word	0x00030244

000b43f8 <network_connect>:
#endif

DYNALIB_BEGIN(system_net)

DYNALIB_FN(0, system_net, network_config, const void*(network_handle_t, uint32_t, void*))
DYNALIB_FN(1, system_net, network_connect, void(network_handle_t, uint32_t, uint32_t, void*))
   b43f8:	b508      	push	{r3, lr}
   b43fa:	4b02      	ldr	r3, [pc, #8]	; (b4404 <network_connect+0xc>)
   b43fc:	681b      	ldr	r3, [r3, #0]
   b43fe:	685b      	ldr	r3, [r3, #4]
   b4400:	9301      	str	r3, [sp, #4]
   b4402:	bd08      	pop	{r3, pc}
   b4404:	00030240 	.word	0x00030240

000b4408 <network_connecting>:
DYNALIB_FN(2, system_net, network_connecting, bool(network_handle_t, uint32_t, void*))
   b4408:	b508      	push	{r3, lr}
   b440a:	4b02      	ldr	r3, [pc, #8]	; (b4414 <network_connecting+0xc>)
   b440c:	681b      	ldr	r3, [r3, #0]
   b440e:	689b      	ldr	r3, [r3, #8]
   b4410:	9301      	str	r3, [sp, #4]
   b4412:	bd08      	pop	{r3, pc}
   b4414:	00030240 	.word	0x00030240

000b4418 <network_disconnect>:
DYNALIB_FN(3, system_net, network_disconnect, void(network_handle_t, uint32_t, void*))
   b4418:	b508      	push	{r3, lr}
   b441a:	4b02      	ldr	r3, [pc, #8]	; (b4424 <network_disconnect+0xc>)
   b441c:	681b      	ldr	r3, [r3, #0]
   b441e:	68db      	ldr	r3, [r3, #12]
   b4420:	9301      	str	r3, [sp, #4]
   b4422:	bd08      	pop	{r3, pc}
   b4424:	00030240 	.word	0x00030240

000b4428 <network_ready>:
DYNALIB_FN(4, system_net, network_ready, bool(network_handle_t, uint32_t, void*))
   b4428:	b508      	push	{r3, lr}
   b442a:	4b02      	ldr	r3, [pc, #8]	; (b4434 <network_ready+0xc>)
   b442c:	681b      	ldr	r3, [r3, #0]
   b442e:	691b      	ldr	r3, [r3, #16]
   b4430:	9301      	str	r3, [sp, #4]
   b4432:	bd08      	pop	{r3, pc}
   b4434:	00030240 	.word	0x00030240

000b4438 <network_on>:
DYNALIB_FN(5, system_net, network_on, void(network_handle_t, uint32_t, uint32_t, void*))
   b4438:	b508      	push	{r3, lr}
   b443a:	4b02      	ldr	r3, [pc, #8]	; (b4444 <network_on+0xc>)
   b443c:	681b      	ldr	r3, [r3, #0]
   b443e:	695b      	ldr	r3, [r3, #20]
   b4440:	9301      	str	r3, [sp, #4]
   b4442:	bd08      	pop	{r3, pc}
   b4444:	00030240 	.word	0x00030240

000b4448 <network_off>:
DYNALIB_FN(6, system_net, network_off, void(network_handle_t, uint32_t, uint32_t, void*))
   b4448:	b508      	push	{r3, lr}
   b444a:	4b02      	ldr	r3, [pc, #8]	; (b4454 <network_off+0xc>)
   b444c:	681b      	ldr	r3, [r3, #0]
   b444e:	699b      	ldr	r3, [r3, #24]
   b4450:	9301      	str	r3, [sp, #4]
   b4452:	bd08      	pop	{r3, pc}
   b4454:	00030240 	.word	0x00030240

000b4458 <network_listen>:
DYNALIB_FN(7, system_net, network_listen, void(network_handle_t, uint32_t, void*))
   b4458:	b508      	push	{r3, lr}
   b445a:	4b02      	ldr	r3, [pc, #8]	; (b4464 <network_listen+0xc>)
   b445c:	681b      	ldr	r3, [r3, #0]
   b445e:	69db      	ldr	r3, [r3, #28]
   b4460:	9301      	str	r3, [sp, #4]
   b4462:	bd08      	pop	{r3, pc}
   b4464:	00030240 	.word	0x00030240

000b4468 <network_listening>:
DYNALIB_FN(8, system_net, network_listening, bool(network_handle_t, uint32_t, void*))
   b4468:	b508      	push	{r3, lr}
   b446a:	4b02      	ldr	r3, [pc, #8]	; (b4474 <network_listening+0xc>)
   b446c:	681b      	ldr	r3, [r3, #0]
   b446e:	6a1b      	ldr	r3, [r3, #32]
   b4470:	9301      	str	r3, [sp, #4]
   b4472:	bd08      	pop	{r3, pc}
   b4474:	00030240 	.word	0x00030240

000b4478 <network_set_listen_timeout>:
DYNALIB_FN(9, system_net, network_has_credentials, bool(network_handle_t, uint32_t, void*))
DYNALIB_FN(10, system_net, network_set_credentials, int(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(11, system_net, network_clear_credentials, bool(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(12, system_net, network_set_listen_timeout, void(network_handle_t, uint16_t, void*))
   b4478:	b508      	push	{r3, lr}
   b447a:	4b02      	ldr	r3, [pc, #8]	; (b4484 <network_set_listen_timeout+0xc>)
   b447c:	681b      	ldr	r3, [r3, #0]
   b447e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   b4480:	9301      	str	r3, [sp, #4]
   b4482:	bd08      	pop	{r3, pc}
   b4484:	00030240 	.word	0x00030240

000b4488 <network_get_listen_timeout>:
DYNALIB_FN(13, system_net, network_get_listen_timeout, uint16_t(network_handle_t, uint32_t, void*))
   b4488:	b508      	push	{r3, lr}
   b448a:	4b02      	ldr	r3, [pc, #8]	; (b4494 <network_get_listen_timeout+0xc>)
   b448c:	681b      	ldr	r3, [r3, #0]
   b448e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   b4490:	9301      	str	r3, [sp, #4]
   b4492:	bd08      	pop	{r3, pc}
   b4494:	00030240 	.word	0x00030240

000b4498 <network_is_on>:
DYNALIB_FN(14, system_net, network_set_hostname, int(network_handle_t, uint32_t, const char*, void*))
DYNALIB_FN(15, system_net, network_get_hostname, int(network_handle_t, uint32_t, char*, size_t, void*))
DYNALIB_FN(16, system_net, network_is_on, bool(network_handle_t, void*))
   b4498:	b508      	push	{r3, lr}
   b449a:	4b02      	ldr	r3, [pc, #8]	; (b44a4 <network_is_on+0xc>)
   b449c:	681b      	ldr	r3, [r3, #0]
   b449e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b44a0:	9301      	str	r3, [sp, #4]
   b44a2:	bd08      	pop	{r3, pc}
   b44a4:	00030240 	.word	0x00030240

000b44a8 <network_is_off>:
DYNALIB_FN(17, system_net, network_is_off, bool(network_handle_t, void*))
   b44a8:	b508      	push	{r3, lr}
   b44aa:	4b02      	ldr	r3, [pc, #8]	; (b44b4 <network_is_off+0xc>)
   b44ac:	681b      	ldr	r3, [r3, #0]
   b44ae:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   b44b0:	9301      	str	r3, [sp, #4]
   b44b2:	bd08      	pop	{r3, pc}
   b44b4:	00030240 	.word	0x00030240

000b44b8 <malloc>:
#include "hal_platform.h"
#endif // defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))

DYNALIB_BEGIN(rt)

DYNALIB_FN(0, rt, malloc, void*(size_t))
   b44b8:	b508      	push	{r3, lr}
   b44ba:	4b02      	ldr	r3, [pc, #8]	; (b44c4 <malloc+0xc>)
   b44bc:	681b      	ldr	r3, [r3, #0]
   b44be:	681b      	ldr	r3, [r3, #0]
   b44c0:	9301      	str	r3, [sp, #4]
   b44c2:	bd08      	pop	{r3, pc}
   b44c4:	0003021c 	.word	0x0003021c

000b44c8 <free>:
DYNALIB_FN(1, rt, free, void(void*))
   b44c8:	b508      	push	{r3, lr}
   b44ca:	4b02      	ldr	r3, [pc, #8]	; (b44d4 <free+0xc>)
   b44cc:	681b      	ldr	r3, [r3, #0]
   b44ce:	685b      	ldr	r3, [r3, #4]
   b44d0:	9301      	str	r3, [sp, #4]
   b44d2:	bd08      	pop	{r3, pc}
   b44d4:	0003021c 	.word	0x0003021c

000b44d8 <__assert_func>:
DYNALIB_FN(13, rt, _free_r, void(struct _reent*, void*))
DYNALIB_FN(14, rt, _realloc_r, void*(struct _reent*, void*, size_t))
DYNALIB_FN(15, rt, __errno, int*())

#if defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))
DYNALIB_FN(16, rt, __assert_func, void(const char*, int, const char*, const char*))
   b44d8:	b508      	push	{r3, lr}
   b44da:	4b02      	ldr	r3, [pc, #8]	; (b44e4 <__assert_func+0xc>)
   b44dc:	681b      	ldr	r3, [r3, #0]
   b44de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b44e0:	9301      	str	r3, [sp, #4]
   b44e2:	bd08      	pop	{r3, pc}
   b44e4:	0003021c 	.word	0x0003021c

000b44e8 <newlib_impure_ptr_callback>:
DYNALIB_FN(17, rt, newlib_impure_ptr_callback, void(void (*)(struct _reent*, size_t, uint32_t, void*), void*))
   b44e8:	b508      	push	{r3, lr}
   b44ea:	4b02      	ldr	r3, [pc, #8]	; (b44f4 <newlib_impure_ptr_callback+0xc>)
   b44ec:	681b      	ldr	r3, [r3, #0]
   b44ee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   b44f0:	9301      	str	r3, [sp, #4]
   b44f2:	bd08      	pop	{r3, pc}
   b44f4:	0003021c 	.word	0x0003021c

000b44f8 <_Z3mapiiiii>:
    hal_adc_set_sample_time(ADC_SampleTime);
}

int map(int value, int fromStart, int fromEnd, int toStart, int toEnd)
{
    if (fromEnd == fromStart) {
   b44f8:	428a      	cmp	r2, r1
{
   b44fa:	b510      	push	{r4, lr}
    if (fromEnd == fromStart) {
   b44fc:	d007      	beq.n	b450e <_Z3mapiiiii+0x16>
        return value;
    }
    return (value - fromStart) * (toEnd - toStart) / (fromEnd - fromStart) + toStart;
   b44fe:	1a44      	subs	r4, r0, r1
   b4500:	9802      	ldr	r0, [sp, #8]
   b4502:	1ac0      	subs	r0, r0, r3
   b4504:	4344      	muls	r4, r0
   b4506:	1a50      	subs	r0, r2, r1
   b4508:	fb94 f0f0 	sdiv	r0, r4, r0
   b450c:	4418      	add	r0, r3
}
   b450e:	bd10      	pop	{r4, pc}

000b4510 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E>:
    /**
     * Creates a shared mutex.
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
   b4510:	4802      	ldr	r0, [pc, #8]	; (b451c <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0xc>)
   b4512:	2300      	movs	r3, #0
   b4514:	6003      	str	r3, [r0, #0]
    {
        os_mutex_recursive_create(&handle_);
   b4516:	f7ff be33 	b.w	b4180 <os_mutex_recursive_create>
   b451a:	bf00      	nop
   b451c:	2003e6b8 	.word	0x2003e6b8

000b4520 <_ZN5spark13EthernetClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   b4520:	2200      	movs	r2, #0
   b4522:	6840      	ldr	r0, [r0, #4]
   b4524:	4611      	mov	r1, r2
   b4526:	f7ff bf9f 	b.w	b4468 <network_listening>

000b452a <_ZN5spark13EthernetClass16getListenTimeoutEv>:
        return network_get_listen_timeout(*this, 0, NULL);
   b452a:	2200      	movs	r2, #0
   b452c:	6840      	ldr	r0, [r0, #4]
   b452e:	4611      	mov	r1, r2
   b4530:	f7ff bfaa 	b.w	b4488 <network_get_listen_timeout>

000b4534 <_ZN5spark13EthernetClass16setListenTimeoutEt>:
        network_set_listen_timeout(*this, timeout, NULL);
   b4534:	6840      	ldr	r0, [r0, #4]
   b4536:	2200      	movs	r2, #0
   b4538:	f7ff bf9e 	b.w	b4478 <network_set_listen_timeout>

000b453c <_ZN5spark13EthernetClass6listenEb>:
        network_listen(*this, begin ? 0 : 1, NULL);
   b453c:	6840      	ldr	r0, [r0, #4]
   b453e:	2200      	movs	r2, #0
   b4540:	f081 0101 	eor.w	r1, r1, #1
   b4544:	f7ff bf88 	b.w	b4458 <network_listen>

000b4548 <_ZN5spark13EthernetClass3offEv>:
        network_off(*this, 0, 0, NULL);
   b4548:	2300      	movs	r3, #0
   b454a:	6840      	ldr	r0, [r0, #4]
   b454c:	461a      	mov	r2, r3
   b454e:	4619      	mov	r1, r3
   b4550:	f7ff bf7a 	b.w	b4448 <network_off>

000b4554 <_ZN5spark13EthernetClass2onEv>:
        network_on(*this, 0, 0, NULL);
   b4554:	2300      	movs	r3, #0
   b4556:	6840      	ldr	r0, [r0, #4]
   b4558:	461a      	mov	r2, r3
   b455a:	4619      	mov	r1, r3
   b455c:	f7ff bf6c 	b.w	b4438 <network_on>

000b4560 <_ZN5spark13EthernetClass5readyEv>:
    }

    bool ready() {
        return network_ready(*this, 0,  NULL);
   b4560:	2200      	movs	r2, #0
   b4562:	6840      	ldr	r0, [r0, #4]
   b4564:	4611      	mov	r1, r2
   b4566:	f7ff bf5f 	b.w	b4428 <network_ready>

000b456a <_ZN5spark13EthernetClass10connectingEv>:
        return network_connecting(*this, 0, NULL);
   b456a:	2200      	movs	r2, #0
   b456c:	6840      	ldr	r0, [r0, #4]
   b456e:	4611      	mov	r1, r2
   b4570:	f7ff bf4a 	b.w	b4408 <network_connecting>

000b4574 <_ZN5spark13EthernetClass10disconnectEv>:
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   b4574:	6840      	ldr	r0, [r0, #4]
   b4576:	2200      	movs	r2, #0
   b4578:	2102      	movs	r1, #2
   b457a:	f7ff bf4d 	b.w	b4418 <network_disconnect>

000b457e <_ZN5spark13EthernetClass7connectEj>:
        network_connect(*this, flags, 0, NULL);
   b457e:	2300      	movs	r3, #0
   b4580:	6840      	ldr	r0, [r0, #4]
   b4582:	461a      	mov	r2, r3
   b4584:	f7ff bf38 	b.w	b43f8 <network_connect>

000b4588 <_GLOBAL__sub_I__ZN5spark8EthernetE>:
    static NetworkClass& from(network_interface_t nif);

    virtual IPAddress resolve(const char* name);

    explicit NetworkClass(network_interface_t iface)
            : iface_(iface) {
   b4588:	4b02      	ldr	r3, [pc, #8]	; (b4594 <_GLOBAL__sub_I__ZN5spark8EthernetE+0xc>)
   b458a:	2203      	movs	r2, #3
   b458c:	605a      	str	r2, [r3, #4]
            NetworkClass(NETWORK_INTERFACE_ETHERNET) {
   b458e:	4a02      	ldr	r2, [pc, #8]	; (b4598 <_GLOBAL__sub_I__ZN5spark8EthernetE+0x10>)
   b4590:	601a      	str	r2, [r3, #0]

namespace spark {

EthernetClass Ethernet;

} // spark
   b4592:	4770      	bx	lr
   b4594:	2003e6bc 	.word	0x2003e6bc
   b4598:	000b5054 	.word	0x000b5054

000b459c <_ZN7TwoWireD1Ev>:
private:
  hal_i2c_interface_t _i2c;

public:
  TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& config);
  virtual ~TwoWire() {};
   b459c:	4770      	bx	lr

000b459e <_ZN7TwoWire5writeEPKhj>:

// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
   b459e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b45a0:	4606      	mov	r6, r0
   b45a2:	4615      	mov	r5, r2
   b45a4:	460c      	mov	r4, r1
   b45a6:	188f      	adds	r7, r1, r2
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
   b45a8:	42bc      	cmp	r4, r7
   b45aa:	d006      	beq.n	b45ba <_ZN7TwoWire5writeEPKhj+0x1c>
  {
    write(data[i]);
   b45ac:	6833      	ldr	r3, [r6, #0]
   b45ae:	f814 1b01 	ldrb.w	r1, [r4], #1
   b45b2:	689b      	ldr	r3, [r3, #8]
   b45b4:	4630      	mov	r0, r6
   b45b6:	4798      	blx	r3
  for(size_t i = 0; i < quantity; ++i)
   b45b8:	e7f6      	b.n	b45a8 <_ZN7TwoWire5writeEPKhj+0xa>
  }

  return quantity;
}
   b45ba:	4628      	mov	r0, r5
   b45bc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000b45be <_ZN7TwoWire5writeEh>:
  return hal_i2c_write(_i2c, data, NULL);
   b45be:	7c00      	ldrb	r0, [r0, #16]
   b45c0:	2200      	movs	r2, #0
   b45c2:	f7ff be1d 	b.w	b4200 <hal_i2c_write>

000b45c6 <_ZN7TwoWire9availableEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::available(void)
{
  return hal_i2c_available(_i2c, NULL);
   b45c6:	7c00      	ldrb	r0, [r0, #16]
   b45c8:	2100      	movs	r1, #0
   b45ca:	f7ff be21 	b.w	b4210 <hal_i2c_available>

000b45ce <_ZN7TwoWire4readEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::read(void)
{
  return hal_i2c_read(_i2c, NULL);
   b45ce:	7c00      	ldrb	r0, [r0, #16]
   b45d0:	2100      	movs	r1, #0
   b45d2:	f7ff be25 	b.w	b4220 <hal_i2c_read>

000b45d6 <_ZN7TwoWire4peekEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::peek(void)
{
  return hal_i2c_peek(_i2c, NULL);
   b45d6:	7c00      	ldrb	r0, [r0, #16]
   b45d8:	2100      	movs	r1, #0
   b45da:	f7ff be29 	b.w	b4230 <hal_i2c_peek>

000b45de <_ZN7TwoWire5flushEv>:
}

void TwoWire::flush(void)
{
  hal_i2c_flush(_i2c, NULL);
   b45de:	7c00      	ldrb	r0, [r0, #16]
   b45e0:	2100      	movs	r1, #0
   b45e2:	f7ff be2d 	b.w	b4240 <hal_i2c_flush>

000b45e6 <_ZN7TwoWireD0Ev>:
   b45e6:	b510      	push	{r4, lr}
   b45e8:	2114      	movs	r1, #20
   b45ea:	4604      	mov	r4, r0
   b45ec:	f7ff fd5b 	bl	b40a6 <_ZdlPvj>
   b45f0:	4620      	mov	r0, r4
   b45f2:	bd10      	pop	{r4, pc}

000b45f4 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>:
TwoWire::TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& conf)
   b45f4:	b538      	push	{r3, r4, r5, lr}
   b45f6:	4604      	mov	r4, r0
   b45f8:	4615      	mov	r5, r2
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
   b45fa:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   b45fe:	2200      	movs	r2, #0
   b4600:	e9c4 2301 	strd	r2, r3, [r4, #4]
   b4604:	4b09      	ldr	r3, [pc, #36]	; (b462c <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t+0x38>)
  _i2c = i2c;
   b4606:	7421      	strb	r1, [r4, #16]
TwoWire::TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& conf)
   b4608:	4608      	mov	r0, r1
   b460a:	6023      	str	r3, [r4, #0]
  int result = hal_i2c_init(_i2c, &conf);
   b460c:	4629      	mov	r1, r5
   b460e:	f7ff fe27 	bl	b4260 <hal_i2c_init>
  if (result == SYSTEM_ERROR_NOT_ENOUGH_DATA && 
   b4612:	30bf      	adds	r0, #191	; 0xbf
   b4614:	d108      	bne.n	b4628 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t+0x34>
      (conf.flags & HAL_I2C_CONFIG_FLAG_FREEABLE)) {
   b4616:	696b      	ldr	r3, [r5, #20]
  if (result == SYSTEM_ERROR_NOT_ENOUGH_DATA && 
   b4618:	07db      	lsls	r3, r3, #31
   b461a:	d505      	bpl.n	b4628 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t+0x34>
    free(conf.rx_buffer);
   b461c:	6868      	ldr	r0, [r5, #4]
   b461e:	f7ff ff53 	bl	b44c8 <free>
    free(conf.tx_buffer);
   b4622:	68e8      	ldr	r0, [r5, #12]
   b4624:	f7ff ff50 	bl	b44c8 <free>
}
   b4628:	4620      	mov	r0, r4
   b462a:	bd38      	pop	{r3, r4, r5, pc}
   b462c:	000b5090 	.word	0x000b5090

000b4630 <_ZN9IPAddressD1Ev>:
    IPAddress(uint32_t address);
    // 4 bytes defining the IP address in network order
    IPAddress(const uint8_t* address);
    IPAddress(const HAL_IPAddress& address);

    virtual ~IPAddress() {}
   b4630:	4770      	bx	lr

000b4632 <_ZN9IPAddressD0Ev>:
   b4632:	b510      	push	{r4, lr}
   b4634:	2118      	movs	r1, #24
   b4636:	4604      	mov	r4, r0
   b4638:	f7ff fd35 	bl	b40a6 <_ZdlPvj>
   b463c:	4620      	mov	r0, r4
   b463e:	bd10      	pop	{r4, pc}

000b4640 <_ZNK9IPAddress7printToER5Print>:
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
   b4640:	b5f0      	push	{r4, r5, r6, r7, lr}
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
   b4642:	7d03      	ldrb	r3, [r0, #20]
   b4644:	2b06      	cmp	r3, #6
{
   b4646:	b08d      	sub	sp, #52	; 0x34
   b4648:	460e      	mov	r6, r1
		char buf[INET6_ADDRSTRLEN+1];
		buf[0] = 0;
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   b464a:	f100 0704 	add.w	r7, r0, #4
   b464e:	f04f 0400 	mov.w	r4, #0
	if (address.v==6) {
   b4652:	d012      	beq.n	b467a <_ZNK9IPAddress7printToER5Print+0x3a>
   b4654:	f100 0508 	add.w	r5, r0, #8
            val = n;
        }
#if __GNUC__ >= 9
#pragma GCC diagnostic pop
#endif // __GNUC__ >= 9
        return printNumber(val, base) + t;
   b4658:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
   b465c:	220a      	movs	r2, #10
   b465e:	4630      	mov	r0, r6
   b4660:	f000 f943 	bl	b48ea <_ZN5Print11printNumberEmh>
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
   b4664:	42af      	cmp	r7, r5
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
   b4666:	4404      	add	r4, r0
    for (int i = 0; i < 4; i++)
   b4668:	d019      	beq.n	b469e <_ZNK9IPAddress7printToER5Print+0x5e>
        if (n)
   b466a:	2c00      	cmp	r4, #0
   b466c:	d0f4      	beq.n	b4658 <_ZNK9IPAddress7printToER5Print+0x18>
            n += p.print('.');
   b466e:	212e      	movs	r1, #46	; 0x2e
   b4670:	4630      	mov	r0, r6
   b4672:	f000 f937 	bl	b48e4 <_ZN5Print5printEc>
   b4676:	4404      	add	r4, r0
   b4678:	e7ee      	b.n	b4658 <_ZNK9IPAddress7printToER5Print+0x18>
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   b467a:	232f      	movs	r3, #47	; 0x2f
   b467c:	466a      	mov	r2, sp
   b467e:	4639      	mov	r1, r7
   b4680:	200a      	movs	r0, #10
		buf[0] = 0;
   b4682:	f88d 4000 	strb.w	r4, [sp]
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   b4686:	f7ff fdf3 	bl	b4270 <inet_inet_ntop>
      return write((const uint8_t *)str, strlen(str));
   b468a:	4668      	mov	r0, sp
   b468c:	f7ff fcc6 	bl	b401c <strlen>
   b4690:	6833      	ldr	r3, [r6, #0]
   b4692:	4602      	mov	r2, r0
   b4694:	68db      	ldr	r3, [r3, #12]
   b4696:	4669      	mov	r1, sp
   b4698:	4630      	mov	r0, r6
   b469a:	4798      	blx	r3
   b469c:	4604      	mov	r4, r0
    }
    return n;
}
   b469e:	4620      	mov	r0, r4
   b46a0:	b00d      	add	sp, #52	; 0x34
   b46a2:	bdf0      	pop	{r4, r5, r6, r7, pc}

000b46a4 <_ZN9IPAddressC1Ev>:
IPAddress::IPAddress()
   b46a4:	b510      	push	{r4, lr}
   b46a6:	4b05      	ldr	r3, [pc, #20]	; (b46bc <_ZN9IPAddressC1Ev+0x18>)
   b46a8:	4604      	mov	r4, r0
        return address;
    }

    virtual size_t printTo(Print& p) const;

    void clear() { memset(&address, 0, sizeof (address)); }
   b46aa:	2211      	movs	r2, #17
   b46ac:	f840 3b04 	str.w	r3, [r0], #4
   b46b0:	2100      	movs	r1, #0
   b46b2:	f000 fc25 	bl	b4f00 <memset>
}
   b46b6:	4620      	mov	r0, r4
   b46b8:	bd10      	pop	{r4, pc}
   b46ba:	bf00      	nop
   b46bc:	000b50b8 	.word	0x000b50b8

000b46c0 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>:
IPAddress::IPAddress(const HAL_IPAddress& address)
   b46c0:	4603      	mov	r3, r0
   b46c2:	4a07      	ldr	r2, [pc, #28]	; (b46e0 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0x20>)
   b46c4:	b510      	push	{r4, lr}
   b46c6:	f843 2b04 	str.w	r2, [r3], #4
    memcpy(&this->address, &address, sizeof(address));
   b46ca:	f101 0210 	add.w	r2, r1, #16
   b46ce:	f851 4b04 	ldr.w	r4, [r1], #4
   b46d2:	f843 4b04 	str.w	r4, [r3], #4
   b46d6:	4291      	cmp	r1, r2
   b46d8:	d1f9      	bne.n	b46ce <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0xe>
   b46da:	780a      	ldrb	r2, [r1, #0]
   b46dc:	701a      	strb	r2, [r3, #0]
}
   b46de:	bd10      	pop	{r4, pc}
   b46e0:	000b50b8 	.word	0x000b50b8

000b46e4 <_ZN9IPAddress8set_ipv4Ehhhh>:
{
   b46e4:	b510      	push	{r4, lr}
    address.ipv4 = b0<<24 | b1 << 16 | b2 << 8 | b3;
   b46e6:	f89d 4008 	ldrb.w	r4, [sp, #8]
   b46ea:	ea44 2303 	orr.w	r3, r4, r3, lsl #8
   b46ee:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
   b46f2:	ea42 6101 	orr.w	r1, r2, r1, lsl #24
        address.v = version;
   b46f6:	2304      	movs	r3, #4
   b46f8:	6041      	str	r1, [r0, #4]
   b46fa:	7503      	strb	r3, [r0, #20]
}
   b46fc:	bd10      	pop	{r4, pc}
	...

000b4700 <_ZN9IPAddressC1EPKh>:
IPAddress::IPAddress(const uint8_t* addr)
   b4700:	b507      	push	{r0, r1, r2, lr}
   b4702:	4b06      	ldr	r3, [pc, #24]	; (b471c <_ZN9IPAddressC1EPKh+0x1c>)
   b4704:	6003      	str	r3, [r0, #0]
    set_ipv4(addr[0], addr[1], addr[2], addr[3]);
   b4706:	78cb      	ldrb	r3, [r1, #3]
   b4708:	9300      	str	r3, [sp, #0]
   b470a:	788b      	ldrb	r3, [r1, #2]
   b470c:	784a      	ldrb	r2, [r1, #1]
   b470e:	7809      	ldrb	r1, [r1, #0]
   b4710:	f7ff ffe8 	bl	b46e4 <_ZN9IPAddress8set_ipv4Ehhhh>
}
   b4714:	b003      	add	sp, #12
   b4716:	f85d fb04 	ldr.w	pc, [sp], #4
   b471a:	bf00      	nop
   b471c:	000b50b8 	.word	0x000b50b8

000b4720 <_GLOBAL__sub_I__ZN5spark3LogE>:
    // This handler doesn't support direct logging
}

// spark::Logger
inline spark::Logger::Logger(const char *name) :
        name_(name) {
   b4720:	4b01      	ldr	r3, [pc, #4]	; (b4728 <_GLOBAL__sub_I__ZN5spark3LogE+0x8>)
   b4722:	4a02      	ldr	r2, [pc, #8]	; (b472c <_GLOBAL__sub_I__ZN5spark3LogE+0xc>)
   b4724:	601a      	str	r2, [r3, #0]
#if Wiring_LogConfig

// spark::
void spark::logProcessControlRequest(ctrl_request* req) {
    JSONRequestHandler::process(req);
}
   b4726:	4770      	bx	lr
   b4728:	2003e6c4 	.word	0x2003e6c4
   b472c:	000b50c4 	.word	0x000b50c4

000b4730 <_ZN5spark12NetworkClass7connectEj>:
        return Network;
    }
}

void NetworkClass::connect(unsigned flags) {
    network_connect(*this, flags, 0, nullptr);
   b4730:	2300      	movs	r3, #0
   b4732:	6840      	ldr	r0, [r0, #4]
   b4734:	461a      	mov	r2, r3
   b4736:	f7ff be5f 	b.w	b43f8 <network_connect>

000b473a <_ZN5spark12NetworkClass10disconnectEv>:
}

void NetworkClass::disconnect() {
    network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, nullptr);
   b473a:	6840      	ldr	r0, [r0, #4]
   b473c:	2200      	movs	r2, #0
   b473e:	2102      	movs	r1, #2
   b4740:	f7ff be6a 	b.w	b4418 <network_disconnect>

000b4744 <_ZN5spark12NetworkClass10connectingEv>:
}

bool NetworkClass::connecting() {
    return network_connecting(*this, 0, nullptr);
   b4744:	2200      	movs	r2, #0
   b4746:	6840      	ldr	r0, [r0, #4]
   b4748:	4611      	mov	r1, r2
   b474a:	f7ff be5d 	b.w	b4408 <network_connecting>

000b474e <_ZN5spark12NetworkClass5readyEv>:
}

bool NetworkClass::ready() {
    return network_ready(*this, 0, nullptr);
   b474e:	2200      	movs	r2, #0
   b4750:	6840      	ldr	r0, [r0, #4]
   b4752:	4611      	mov	r1, r2
   b4754:	f7ff be68 	b.w	b4428 <network_ready>

000b4758 <_ZN5spark12NetworkClass2onEv>:
}

void NetworkClass::on() {
    network_on(*this, 0, 0, nullptr);
   b4758:	2300      	movs	r3, #0
   b475a:	6840      	ldr	r0, [r0, #4]
   b475c:	461a      	mov	r2, r3
   b475e:	4619      	mov	r1, r3
   b4760:	f7ff be6a 	b.w	b4438 <network_on>

000b4764 <_ZN5spark12NetworkClass3offEv>:
}

void NetworkClass::off() {
    network_off(*this, 0, 0, nullptr);
   b4764:	2300      	movs	r3, #0
   b4766:	6840      	ldr	r0, [r0, #4]
   b4768:	461a      	mov	r2, r3
   b476a:	4619      	mov	r1, r3
   b476c:	f7ff be6c 	b.w	b4448 <network_off>

000b4770 <_ZN5spark12NetworkClass4isOnEv>:
}

bool NetworkClass::isOn() {
    return network_is_on(*this, nullptr);
   b4770:	6840      	ldr	r0, [r0, #4]
   b4772:	2100      	movs	r1, #0
   b4774:	f7ff be90 	b.w	b4498 <network_is_on>

000b4778 <_ZN5spark12NetworkClass5isOffEv>:
}

bool NetworkClass::isOff() {
    return network_is_off(*this, nullptr);
   b4778:	6840      	ldr	r0, [r0, #4]
   b477a:	2100      	movs	r1, #0
   b477c:	f7ff be94 	b.w	b44a8 <network_is_off>

000b4780 <_ZN5spark12NetworkClass6listenEb>:
}

void NetworkClass::listen(bool begin) {
    network_listen(*this, begin ? 0 : 1, nullptr);
   b4780:	6840      	ldr	r0, [r0, #4]
   b4782:	2200      	movs	r2, #0
   b4784:	f081 0101 	eor.w	r1, r1, #1
   b4788:	f7ff be66 	b.w	b4458 <network_listen>

000b478c <_ZN5spark12NetworkClass16setListenTimeoutEt>:
}

void NetworkClass::setListenTimeout(uint16_t timeout) {
    network_set_listen_timeout(*this, timeout, nullptr);
   b478c:	6840      	ldr	r0, [r0, #4]
   b478e:	2200      	movs	r2, #0
   b4790:	f7ff be72 	b.w	b4478 <network_set_listen_timeout>

000b4794 <_ZN5spark12NetworkClass16getListenTimeoutEv>:
}

uint16_t NetworkClass::getListenTimeout() {
    return network_get_listen_timeout(*this, 0, nullptr);
   b4794:	2200      	movs	r2, #0
   b4796:	6840      	ldr	r0, [r0, #4]
   b4798:	4611      	mov	r1, r2
   b479a:	f7ff be75 	b.w	b4488 <network_get_listen_timeout>

000b479e <_ZN5spark12NetworkClass9listeningEv>:
}

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
   b479e:	2200      	movs	r2, #0
   b47a0:	6840      	ldr	r0, [r0, #4]
   b47a2:	4611      	mov	r1, r2
   b47a4:	f7ff be60 	b.w	b4468 <network_listening>

000b47a8 <_ZN5spark12NetworkClass7resolveEPKc>:
}

IPAddress NetworkClass::resolve(const char* name) {
   b47a8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   b47ac:	b095      	sub	sp, #84	; 0x54
   b47ae:	4614      	mov	r4, r2
   b47b0:	460d      	mov	r5, r1
   b47b2:	4607      	mov	r7, r0
    IPAddress addr;
   b47b4:	f7ff ff76 	bl	b46a4 <_ZN9IPAddressC1Ev>
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
   b47b8:	2100      	movs	r1, #0
    struct addrinfo hints = {};
   b47ba:	221c      	movs	r2, #28
   b47bc:	a80d      	add	r0, sp, #52	; 0x34
    struct addrinfo *ai = nullptr;
   b47be:	9100      	str	r1, [sp, #0]
    struct addrinfo hints = {};
   b47c0:	f000 fb9e 	bl	b4f00 <memset>
    hints.ai_flags = AI_ADDRCONFIG;
   b47c4:	2340      	movs	r3, #64	; 0x40
   b47c6:	930c      	str	r3, [sp, #48]	; 0x30
    hints.ai_family = AF_UNSPEC;
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
   b47c8:	4620      	mov	r0, r4
   b47ca:	466b      	mov	r3, sp
   b47cc:	aa0c      	add	r2, sp, #48	; 0x30
   b47ce:	2100      	movs	r1, #0
   b47d0:	f7ff fd5e 	bl	b4290 <netdb_getaddrinfo>
    if (!r) {
   b47d4:	4604      	mov	r4, r0
   b47d6:	2800      	cmp	r0, #0
   b47d8:	d14b      	bne.n	b4872 <_ZN5spark12NetworkClass7resolveEPKc+0xca>
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   b47da:	4602      	mov	r2, r0
   b47dc:	2101      	movs	r1, #1
   b47de:	6868      	ldr	r0, [r5, #4]
   b47e0:	f7ff fe22 	bl	b4428 <network_ready>
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   b47e4:	2102      	movs	r1, #2
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   b47e6:	4680      	mov	r8, r0
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   b47e8:	4622      	mov	r2, r4
   b47ea:	6868      	ldr	r0, [r5, #4]
   b47ec:	f7ff fe1c 	bl	b4428 <network_ready>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   b47f0:	9e00      	ldr	r6, [sp, #0]
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   b47f2:	4681      	mov	r9, r0
        bool ok = false;
   b47f4:	4621      	mov	r1, r4
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   b47f6:	2e00      	cmp	r6, #0
   b47f8:	d03b      	beq.n	b4872 <_ZN5spark12NetworkClass7resolveEPKc+0xca>
   b47fa:	2900      	cmp	r1, #0
   b47fc:	d139      	bne.n	b4872 <_ZN5spark12NetworkClass7resolveEPKc+0xca>
            // NOTE: using only the first entry that matches the current state of IPv4/IPv6 connectivity
            switch (cur->ai_family) {
   b47fe:	6873      	ldr	r3, [r6, #4]
   b4800:	2b02      	cmp	r3, #2
   b4802:	d003      	beq.n	b480c <_ZN5spark12NetworkClass7resolveEPKc+0x64>
   b4804:	2b0a      	cmp	r3, #10
   b4806:	d011      	beq.n	b482c <_ZN5spark12NetworkClass7resolveEPKc+0x84>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   b4808:	69f6      	ldr	r6, [r6, #28]
   b480a:	e7f4      	b.n	b47f6 <_ZN5spark12NetworkClass7resolveEPKc+0x4e>
                case AF_INET: {
                    if (!ipv4) {
   b480c:	f1b8 0f00 	cmp.w	r8, #0
   b4810:	d0fa      	beq.n	b4808 <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                        continue;
                    }
                    // NOTE: HAL_IPAddress is little-endian
                    auto in = (struct sockaddr_in*)cur->ai_addr;
                    addr = (const uint8_t*)(&in->sin_addr.s_addr);
   b4812:	6971      	ldr	r1, [r6, #20]
        return *this = IPAddress(address);
   b4814:	a806      	add	r0, sp, #24
   b4816:	3104      	adds	r1, #4
class IPAddress : public Printable {
   b4818:	ad07      	add	r5, sp, #28
        return *this = IPAddress(address);
   b481a:	f7ff ff71 	bl	b4700 <_ZN9IPAddressC1EPKh>
class IPAddress : public Printable {
   b481e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b4820:	1d3c      	adds	r4, r7, #4
   b4822:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b4824:	682b      	ldr	r3, [r5, #0]
   b4826:	7023      	strb	r3, [r4, #0]
                    ok = true;
   b4828:	4641      	mov	r1, r8
        return *this = IPAddress(address);
   b482a:	e7ed      	b.n	b4808 <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                    break;
                }
                case AF_INET6: {
                    if (!ipv6) {
   b482c:	f1b9 0f00 	cmp.w	r9, #0
   b4830:	d0ea      	beq.n	b4808 <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                        continue;
                    }
                    auto in6 = (struct sockaddr_in6*)cur->ai_addr;
   b4832:	6974      	ldr	r4, [r6, #20]
                    HAL_IPAddress a = {};
   b4834:	2210      	movs	r2, #16
   b4836:	a801      	add	r0, sp, #4
   b4838:	f000 fb62 	bl	b4f00 <memset>
                    a.v = 6;
   b483c:	2306      	movs	r3, #6
   b483e:	f88d 3014 	strb.w	r3, [sp, #20]
                    memcpy(a.ipv6, in6->sin6_addr.s6_addr, sizeof(a.ipv6));
   b4842:	ad01      	add	r5, sp, #4
   b4844:	f104 0308 	add.w	r3, r4, #8
   b4848:	3418      	adds	r4, #24
   b484a:	6818      	ldr	r0, [r3, #0]
   b484c:	6859      	ldr	r1, [r3, #4]
   b484e:	462a      	mov	r2, r5
   b4850:	c203      	stmia	r2!, {r0, r1}
   b4852:	3308      	adds	r3, #8
   b4854:	42a3      	cmp	r3, r4
   b4856:	4615      	mov	r5, r2
   b4858:	d1f7      	bne.n	b484a <_ZN5spark12NetworkClass7resolveEPKc+0xa2>
                    addr = IPAddress(a);
   b485a:	a901      	add	r1, sp, #4
   b485c:	a806      	add	r0, sp, #24
class IPAddress : public Printable {
   b485e:	ad07      	add	r5, sp, #28
   b4860:	f7ff ff2e 	bl	b46c0 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
   b4864:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b4866:	1d3c      	adds	r4, r7, #4
   b4868:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b486a:	682b      	ldr	r3, [r5, #0]
   b486c:	7023      	strb	r3, [r4, #0]
                    ok = true;
   b486e:	4649      	mov	r1, r9
   b4870:	e7ca      	b.n	b4808 <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                    break;
                }
            }
        }
    }
    freeaddrinfo(ai);
   b4872:	9800      	ldr	r0, [sp, #0]
   b4874:	f7ff fd04 	bl	b4280 <netdb_freeaddrinfo>
    return Cellular.resolve(name);
#endif // Wiring_Cellular

#endif // HAL_USE_INET_HAL_POSIX
    return addr;
}
   b4878:	4638      	mov	r0, r7
   b487a:	b015      	add	sp, #84	; 0x54
   b487c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

000b4880 <_GLOBAL__sub_I__ZN5spark7NetworkE>:
   b4880:	4b02      	ldr	r3, [pc, #8]	; (b488c <_GLOBAL__sub_I__ZN5spark7NetworkE+0xc>)
   b4882:	4a03      	ldr	r2, [pc, #12]	; (b4890 <_GLOBAL__sub_I__ZN5spark7NetworkE+0x10>)
   b4884:	601a      	str	r2, [r3, #0]
   b4886:	2200      	movs	r2, #0
   b4888:	605a      	str	r2, [r3, #4]
    network_free_configuration(c, count, nullptr);
    return res;
}
#endif // HAL_USE_SOCKET_HAL_POSIX

} // spark
   b488a:	4770      	bx	lr
   b488c:	2003e6c8 	.word	0x2003e6c8
   b4890:	000b50d0 	.word	0x000b50d0

000b4894 <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
   b4894:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b4896:	4606      	mov	r6, r0
   b4898:	460d      	mov	r5, r1
  size_t n = 0;
   b489a:	188f      	adds	r7, r1, r2
   b489c:	2400      	movs	r4, #0
  while (size--) {
   b489e:	42bd      	cmp	r5, r7
   b48a0:	d00c      	beq.n	b48bc <_ZN5Print5writeEPKhj+0x28>
     int chunk = write(*buffer++);
   b48a2:	6833      	ldr	r3, [r6, #0]
   b48a4:	f815 1b01 	ldrb.w	r1, [r5], #1
   b48a8:	689b      	ldr	r3, [r3, #8]
   b48aa:	4630      	mov	r0, r6
   b48ac:	4798      	blx	r3
     if (chunk>=0)
   b48ae:	1e03      	subs	r3, r0, #0
   b48b0:	db01      	blt.n	b48b6 <_ZN5Print5writeEPKhj+0x22>
         n += chunk;
   b48b2:	441c      	add	r4, r3
  while (size--) {
   b48b4:	e7f3      	b.n	b489e <_ZN5Print5writeEPKhj+0xa>
     int chunk = write(*buffer++);
   b48b6:	2c00      	cmp	r4, #0
   b48b8:	bf08      	it	eq
   b48ba:	461c      	moveq	r4, r3
             n = chunk;
         break;
     }
  }
  return n;
}
   b48bc:	4620      	mov	r0, r4
   b48be:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000b48c0 <_ZN5Print5writeEPKc>:
    size_t write(const char *str) {
   b48c0:	b513      	push	{r0, r1, r4, lr}
   b48c2:	4604      	mov	r4, r0
    }
   b48c4:	4608      	mov	r0, r1
      if (str == NULL) return 0;
   b48c6:	b159      	cbz	r1, b48e0 <_ZN5Print5writeEPKc+0x20>
      return write((const uint8_t *)str, strlen(str));
   b48c8:	9101      	str	r1, [sp, #4]
   b48ca:	f7ff fba7 	bl	b401c <strlen>
   b48ce:	6823      	ldr	r3, [r4, #0]
   b48d0:	9901      	ldr	r1, [sp, #4]
   b48d2:	68db      	ldr	r3, [r3, #12]
   b48d4:	4602      	mov	r2, r0
   b48d6:	4620      	mov	r0, r4
    }
   b48d8:	b002      	add	sp, #8
   b48da:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return write((const uint8_t *)str, strlen(str));
   b48de:	4718      	bx	r3
    }
   b48e0:	b002      	add	sp, #8
   b48e2:	bd10      	pop	{r4, pc}

000b48e4 <_ZN5Print5printEc>:
  return write(str);
}

size_t Print::print(char c)
{
  return write(c);
   b48e4:	6803      	ldr	r3, [r0, #0]
   b48e6:	689b      	ldr	r3, [r3, #8]
   b48e8:	4718      	bx	r3

000b48ea <_ZN5Print11printNumberEmh>:
  return println(reinterpret_cast<const char*>(str));
}

// Private Methods /////////////////////////////////////////////////////////////

size_t Print::printNumber(unsigned long n, uint8_t base) {
   b48ea:	b530      	push	{r4, r5, lr}
   b48ec:	b08b      	sub	sp, #44	; 0x2c
  char buf[8 * sizeof(n) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
   b48ee:	2300      	movs	r3, #0

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
   b48f0:	2a01      	cmp	r2, #1
  *str = '\0';
   b48f2:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
  if (base < 2) base = 10;
   b48f6:	bf98      	it	ls
   b48f8:	220a      	movls	r2, #10
   b48fa:	ac09      	add	r4, sp, #36	; 0x24

  do {
   decltype(n) m = n;
   n /= base;
   b48fc:	460d      	mov	r5, r1
   b48fe:	fbb1 f1f2 	udiv	r1, r1, r2
   char c = m - base * n;
   b4902:	fb01 5312 	mls	r3, r1, r2, r5
   b4906:	f003 03ff 	and.w	r3, r3, #255	; 0xff
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
   b490a:	2b09      	cmp	r3, #9
   b490c:	bf94      	ite	ls
   b490e:	3330      	addls	r3, #48	; 0x30
   b4910:	3337      	addhi	r3, #55	; 0x37
   b4912:	b2db      	uxtb	r3, r3
  } while(n);
   b4914:	42aa      	cmp	r2, r5
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
   b4916:	f804 3d01 	strb.w	r3, [r4, #-1]!
  } while(n);
   b491a:	d9ef      	bls.n	b48fc <_ZN5Print11printNumberEmh+0x12>

  return write(str);
   b491c:	4621      	mov	r1, r4
   b491e:	f7ff ffcf 	bl	b48c0 <_ZN5Print5writeEPKc>
}
   b4922:	b00b      	add	sp, #44	; 0x2c
   b4924:	bd30      	pop	{r4, r5, pc}
	...

000b4928 <_GLOBAL__sub_I_RGB>:
	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, false_type)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
      };

    _Function_base() : _M_manager(nullptr) { }
   b4928:	4b01      	ldr	r3, [pc, #4]	; (b4930 <_GLOBAL__sub_I_RGB+0x8>)
   b492a:	2200      	movs	r2, #0
   b492c:	609a      	str	r2, [r3, #8]
{
    RGBClass* const d = static_cast<RGBClass*>(data);
    if (d->changeHandler_) {
        d->changeHandler_(r, g, b);
    }
}
   b492e:	4770      	bx	lr
   b4930:	2003e6d0 	.word	0x2003e6d0

000b4934 <_ZN8SPIClassC1E19hal_spi_interface_t>:
    }
    return particle::SPISettings(info->clock, info->bit_order, info->data_mode);
}
} // namespace

SPIClass::SPIClass(hal_spi_interface_t spi)
   b4934:	b510      	push	{r4, lr}
   b4936:	4604      	mov	r4, r0
   b4938:	4608      	mov	r0, r1
{
    _spi = spi;
   b493a:	7021      	strb	r1, [r4, #0]
    hal_spi_init(_spi);
   b493c:	f7ff fcb0 	bl	b42a0 <hal_spi_init>
    _dividerReference = SPI_CLK_SYSTEM; // 0 indicates the system clock
   b4940:	2300      	movs	r3, #0
   b4942:	6063      	str	r3, [r4, #4]
}
   b4944:	4620      	mov	r0, r4
   b4946:	bd10      	pop	{r4, pc}

000b4948 <_GLOBAL__sub_I_System>:
} // namespace particle

// particle::Flag<TagT, ValueT>
template<typename TagT, typename ValueT>
inline particle::Flag<TagT, ValueT>::Flag(ValueT val) :
        val_(val) {
   b4948:	4b05      	ldr	r3, [pc, #20]	; (b4960 <_GLOBAL__sub_I_System+0x18>)
   b494a:	2202      	movs	r2, #2
   b494c:	601a      	str	r2, [r3, #0]

class SystemSleepResult {
public:
    SystemSleepResult()
            : wakeupSource_(nullptr),
              error_(SYSTEM_ERROR_NONE) {
   b494e:	4b05      	ldr	r3, [pc, #20]	; (b4964 <_GLOBAL__sub_I_System+0x1c>)
    SleepResult() {}
   b4950:	4a05      	ldr	r2, [pc, #20]	; (b4968 <_GLOBAL__sub_I_System+0x20>)
   b4952:	609a      	str	r2, [r3, #8]
              error_(SYSTEM_ERROR_NONE) {
   b4954:	2000      	movs	r0, #0
   b4956:	e9c3 0000 	strd	r0, r0, [r3]

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
   b495a:	f7ff bd21 	b.w	b43a0 <set_system_mode>
   b495e:	bf00      	nop
   b4960:	2003e6ec 	.word	0x2003e6ec
   b4964:	2003e6e0 	.word	0x2003e6e0
   b4968:	ffff0000 	.word	0xffff0000

000b496c <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT>:
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
            unix_time_cache = unix_time;
    }
}

const char* TimeClass::format_spec = TIME_FORMAT_DEFAULT;
   b496c:	4b02      	ldr	r3, [pc, #8]	; (b4978 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0xc>)
   b496e:	681a      	ldr	r2, [r3, #0]
   b4970:	4b02      	ldr	r3, [pc, #8]	; (b497c <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0x10>)
   b4972:	601a      	str	r2, [r3, #0]
{
  return isValid();
}


TimeClass Time;
   b4974:	4770      	bx	lr
   b4976:	bf00      	nop
   b4978:	2003e63c 	.word	0x2003e63c
   b497c:	2003e6f0 	.word	0x2003e6f0

000b4980 <_ZN11USARTSerialD1Ev>:
private:
  hal_usart_interface_t _serial;
  bool _blocking;
public:
  USARTSerial(hal_usart_interface_t serial, const hal_usart_buffer_config_t& config);
  virtual ~USARTSerial() {};
   b4980:	4770      	bx	lr

000b4982 <_ZN11USARTSerial14blockOnOverrunEb>:
    hal_usart_half_duplex(_serial, Enable);
}

void USARTSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   b4982:	7441      	strb	r1, [r0, #17]
}
   b4984:	4770      	bx	lr

000b4986 <_ZN11USARTSerial17availableForWriteEv>:


int USARTSerial::availableForWrite(void)
{
   b4986:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available_data_for_write(_serial));
   b4988:	7c00      	ldrb	r0, [r0, #16]
   b498a:	f7ff fcc9 	bl	b4320 <hal_usart_available_data_for_write>
}
   b498e:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   b4992:	bd08      	pop	{r3, pc}

000b4994 <_ZN11USARTSerial9availableEv>:

int USARTSerial::available(void)
{
   b4994:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available(_serial));
   b4996:	7c00      	ldrb	r0, [r0, #16]
   b4998:	f7ff fc9a 	bl	b42d0 <hal_usart_available>
}
   b499c:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   b49a0:	bd08      	pop	{r3, pc}

000b49a2 <_ZN11USARTSerial4peekEv>:

int USARTSerial::peek(void)
{
   b49a2:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_peek(_serial));
   b49a4:	7c00      	ldrb	r0, [r0, #16]
   b49a6:	f7ff fca3 	bl	b42f0 <hal_usart_peek>
}
   b49aa:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   b49ae:	bd08      	pop	{r3, pc}

000b49b0 <_ZN11USARTSerial4readEv>:

int USARTSerial::read(void)
{
   b49b0:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_read(_serial));
   b49b2:	7c00      	ldrb	r0, [r0, #16]
   b49b4:	f7ff fc94 	bl	b42e0 <hal_usart_read>
}
   b49b8:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   b49bc:	bd08      	pop	{r3, pc}

000b49be <_ZN11USARTSerial5flushEv>:

void USARTSerial::flush()
{
  hal_usart_flush(_serial);
   b49be:	7c00      	ldrb	r0, [r0, #16]
   b49c0:	f7ff bc9e 	b.w	b4300 <hal_usart_flush>

000b49c4 <_ZN11USARTSerial5writeEh>:
}

size_t USARTSerial::write(uint8_t c)
{
   b49c4:	b537      	push	{r0, r1, r2, r4, r5, lr}
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   b49c6:	7c45      	ldrb	r5, [r0, #17]
{
   b49c8:	4604      	mov	r4, r0
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   b49ca:	b12d      	cbz	r5, b49d8 <_ZN11USARTSerial5writeEh+0x14>
    // the HAL always blocks.
	  return hal_usart_write(_serial, c);
   b49cc:	7c20      	ldrb	r0, [r4, #16]
  }
  return 0;
}
   b49ce:	b003      	add	sp, #12
   b49d0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
	  return hal_usart_write(_serial, c);
   b49d4:	f7ff bc74 	b.w	b42c0 <hal_usart_write>
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   b49d8:	7c00      	ldrb	r0, [r0, #16]
   b49da:	9101      	str	r1, [sp, #4]
   b49dc:	f7ff fca0 	bl	b4320 <hal_usart_available_data_for_write>
   b49e0:	2800      	cmp	r0, #0
   b49e2:	9901      	ldr	r1, [sp, #4]
   b49e4:	dcf2      	bgt.n	b49cc <_ZN11USARTSerial5writeEh+0x8>
}
   b49e6:	4628      	mov	r0, r5
   b49e8:	b003      	add	sp, #12
   b49ea:	bd30      	pop	{r4, r5, pc}

000b49ec <_ZN11USARTSerialD0Ev>:
   b49ec:	b510      	push	{r4, lr}
   b49ee:	2114      	movs	r1, #20
   b49f0:	4604      	mov	r4, r0
   b49f2:	f7ff fb58 	bl	b40a6 <_ZdlPvj>
   b49f6:	4620      	mov	r0, r4
   b49f8:	bd10      	pop	{r4, pc}
	...

000b49fc <_ZN11USARTSerialC1E21hal_usart_interface_tRK25hal_usart_buffer_config_t>:
USARTSerial::USARTSerial(hal_usart_interface_t serial, const hal_usart_buffer_config_t& config)
   b49fc:	b510      	push	{r4, lr}
   b49fe:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   b4a02:	4604      	mov	r4, r0
   b4a04:	4608      	mov	r0, r1
   b4a06:	4611      	mov	r1, r2
   b4a08:	2200      	movs	r2, #0
   b4a0a:	e9c4 2301 	strd	r2, r3, [r4, #4]
   b4a0e:	4b04      	ldr	r3, [pc, #16]	; (b4a20 <_ZN11USARTSerialC1E21hal_usart_interface_tRK25hal_usart_buffer_config_t+0x24>)
   b4a10:	6023      	str	r3, [r4, #0]
  _blocking = true;
   b4a12:	2301      	movs	r3, #1
  _serial = serial;
   b4a14:	7420      	strb	r0, [r4, #16]
  _blocking = true;
   b4a16:	7463      	strb	r3, [r4, #17]
  hal_usart_init_ex(serial, &config, nullptr);
   b4a18:	f7ff fc8a 	bl	b4330 <hal_usart_init_ex>
}
   b4a1c:	4620      	mov	r0, r4
   b4a1e:	bd10      	pop	{r4, pc}
   b4a20:	000b5128 	.word	0x000b5128

000b4a24 <_ZN9USBSerial14blockOnOverrunEb>:
  HAL_USB_USART_Flush_Data(_serial);
}

void USBSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   b4a24:	7441      	strb	r1, [r0, #17]
}
   b4a26:	4770      	bx	lr

000b4a28 <__tcf_0>:
}

USBSerial& _fetch_usbserial()
{
  HAL_USB_USART_Config conf = acquireSerialBuffer();
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   b4a28:	4770      	bx	lr

000b4a2a <_ZN9USBSerialD1Ev>:
#include "usb_hal.h"
#include "system_task.h"
#include "spark_wiring_startup.h"
#include "concurrent_hal.h"

class USBSerial : public Stream
   b4a2a:	4770      	bx	lr

000b4a2c <_ZN9USBSerial4readEv>:
{
   b4a2c:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
   b4a2e:	2100      	movs	r1, #0
   b4a30:	7c00      	ldrb	r0, [r0, #16]
   b4a32:	f7ff fc9d 	bl	b4370 <HAL_USB_USART_Receive_Data>
}
   b4a36:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   b4a3a:	bd08      	pop	{r3, pc}

000b4a3c <_ZN9USBSerial4peekEv>:
{
   b4a3c:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, true));
   b4a3e:	2101      	movs	r1, #1
   b4a40:	7c00      	ldrb	r0, [r0, #16]
   b4a42:	f7ff fc95 	bl	b4370 <HAL_USB_USART_Receive_Data>
}
   b4a46:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   b4a4a:	bd08      	pop	{r3, pc}

000b4a4c <_ZN9USBSerial17availableForWriteEv>:
{
   b4a4c:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USB_USART_Available_Data_For_Write(_serial));
   b4a4e:	7c00      	ldrb	r0, [r0, #16]
   b4a50:	f7ff fc86 	bl	b4360 <HAL_USB_USART_Available_Data_For_Write>
}
   b4a54:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   b4a58:	bd08      	pop	{r3, pc}

000b4a5a <_ZN9USBSerial9availableEv>:
{
   b4a5a:	b508      	push	{r3, lr}
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
   b4a5c:	7c00      	ldrb	r0, [r0, #16]
   b4a5e:	f7ff fc77 	bl	b4350 <HAL_USB_USART_Available_Data>
}
   b4a62:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   b4a66:	bd08      	pop	{r3, pc}

000b4a68 <_ZN9USBSerial5writeEh>:
{
   b4a68:	b513      	push	{r0, r1, r4, lr}
   b4a6a:	4604      	mov	r4, r0
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   b4a6c:	7c00      	ldrb	r0, [r0, #16]
{
   b4a6e:	9101      	str	r1, [sp, #4]
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   b4a70:	f7ff fc76 	bl	b4360 <HAL_USB_USART_Available_Data_For_Write>
   b4a74:	2800      	cmp	r0, #0
   b4a76:	9901      	ldr	r1, [sp, #4]
   b4a78:	dc01      	bgt.n	b4a7e <_ZN9USBSerial5writeEh+0x16>
   b4a7a:	7c60      	ldrb	r0, [r4, #17]
   b4a7c:	b120      	cbz	r0, b4a88 <_ZN9USBSerial5writeEh+0x20>
    return std::max(0, (int)HAL_USB_USART_Send_Data(_serial, byte));
   b4a7e:	7c20      	ldrb	r0, [r4, #16]
   b4a80:	f7ff fc7e 	bl	b4380 <HAL_USB_USART_Send_Data>
   b4a84:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
}
   b4a88:	b002      	add	sp, #8
   b4a8a:	bd10      	pop	{r4, pc}

000b4a8c <_ZN9USBSerial5flushEv>:
  HAL_USB_USART_Flush_Data(_serial);
   b4a8c:	7c00      	ldrb	r0, [r0, #16]
   b4a8e:	f7ff bc7f 	b.w	b4390 <HAL_USB_USART_Flush_Data>

000b4a92 <_ZN9USBSerialD0Ev>:
   b4a92:	b510      	push	{r4, lr}
   b4a94:	2114      	movs	r1, #20
   b4a96:	4604      	mov	r4, r0
   b4a98:	f7ff fb05 	bl	b40a6 <_ZdlPvj>
   b4a9c:	4620      	mov	r0, r4
   b4a9e:	bd10      	pop	{r4, pc}

000b4aa0 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>:
USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
   b4aa0:	b510      	push	{r4, lr}
   b4aa2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   b4aa6:	4604      	mov	r4, r0
   b4aa8:	4608      	mov	r0, r1
   b4aaa:	2100      	movs	r1, #0
   b4aac:	e9c4 1301 	strd	r1, r3, [r4, #4]
   b4ab0:	4b04      	ldr	r3, [pc, #16]	; (b4ac4 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config+0x24>)
   b4ab2:	6023      	str	r3, [r4, #0]
  _blocking = true;
   b4ab4:	2301      	movs	r3, #1
  _serial = serial;
   b4ab6:	7420      	strb	r0, [r4, #16]
  _blocking = true;
   b4ab8:	7463      	strb	r3, [r4, #17]
  HAL_USB_USART_Init(_serial, &conf);
   b4aba:	4611      	mov	r1, r2
   b4abc:	f7ff fc40 	bl	b4340 <HAL_USB_USART_Init>
}
   b4ac0:	4620      	mov	r0, r4
   b4ac2:	bd10      	pop	{r4, pc}
   b4ac4:	000b5158 	.word	0x000b5158

000b4ac8 <_Z19acquireSerialBufferv>:
{
   b4ac8:	b510      	push	{r4, lr}
  HAL_USB_USART_Config conf = {};
   b4aca:	2214      	movs	r2, #20
{
   b4acc:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {};
   b4ace:	2100      	movs	r1, #0
   b4ad0:	f000 fa16 	bl	b4f00 <memset>
}
   b4ad4:	4620      	mov	r0, r4
   b4ad6:	bd10      	pop	{r4, pc}

000b4ad8 <_Z16_fetch_usbserialv>:
{
   b4ad8:	b510      	push	{r4, lr}
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   b4ada:	4c0f      	ldr	r4, [pc, #60]	; (b4b18 <_Z16_fetch_usbserialv+0x40>)
{
   b4adc:	b088      	sub	sp, #32
  HAL_USB_USART_Config conf = acquireSerialBuffer();
   b4ade:	a803      	add	r0, sp, #12
   b4ae0:	f7ff fff2 	bl	b4ac8 <_Z19acquireSerialBufferv>
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   b4ae4:	7821      	ldrb	r1, [r4, #0]
   b4ae6:	f3bf 8f5b 	dmb	ish
   b4aea:	f011 0101 	ands.w	r1, r1, #1
   b4aee:	d10f      	bne.n	b4b10 <_Z16_fetch_usbserialv+0x38>
   b4af0:	4620      	mov	r0, r4
   b4af2:	9101      	str	r1, [sp, #4]
   b4af4:	f7ff fad9 	bl	b40aa <__cxa_guard_acquire>
   b4af8:	9901      	ldr	r1, [sp, #4]
   b4afa:	b148      	cbz	r0, b4b10 <_Z16_fetch_usbserialv+0x38>
   b4afc:	aa03      	add	r2, sp, #12
   b4afe:	4807      	ldr	r0, [pc, #28]	; (b4b1c <_Z16_fetch_usbserialv+0x44>)
   b4b00:	f7ff ffce 	bl	b4aa0 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
   b4b04:	4620      	mov	r0, r4
   b4b06:	f7ff fad5 	bl	b40b4 <__cxa_guard_release>
   b4b0a:	4805      	ldr	r0, [pc, #20]	; (b4b20 <_Z16_fetch_usbserialv+0x48>)
   b4b0c:	f000 f9e4 	bl	b4ed8 <atexit>
	return _usbserial;
}
   b4b10:	4802      	ldr	r0, [pc, #8]	; (b4b1c <_Z16_fetch_usbserialv+0x44>)
   b4b12:	b008      	add	sp, #32
   b4b14:	bd10      	pop	{r4, pc}
   b4b16:	bf00      	nop
   b4b18:	2003e6f4 	.word	0x2003e6f4
   b4b1c:	2003e6f8 	.word	0x2003e6f8
   b4b20:	000b4a29 	.word	0x000b4a29

000b4b24 <_ZN5spark9WiFiClass5readyEv>:
    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
    }

    bool ready(void) {
        return network_ready(*this, 0, NULL);
   b4b24:	2200      	movs	r2, #0
   b4b26:	6840      	ldr	r0, [r0, #4]
   b4b28:	4611      	mov	r1, r2
   b4b2a:	f7ff bc7d 	b.w	b4428 <network_ready>

000b4b2e <_ZN5spark9WiFiClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   b4b2e:	2200      	movs	r2, #0
   b4b30:	6840      	ldr	r0, [r0, #4]
   b4b32:	4611      	mov	r1, r2
   b4b34:	f7ff bc98 	b.w	b4468 <network_listening>

000b4b38 <_ZN5spark9WiFiClass16getListenTimeoutEv>:
        return network_get_listen_timeout(*this, 0, NULL);
   b4b38:	2200      	movs	r2, #0
   b4b3a:	6840      	ldr	r0, [r0, #4]
   b4b3c:	4611      	mov	r1, r2
   b4b3e:	f7ff bca3 	b.w	b4488 <network_get_listen_timeout>

000b4b42 <_ZN5spark9WiFiClass16setListenTimeoutEt>:
        network_set_listen_timeout(*this, timeout, NULL);
   b4b42:	6840      	ldr	r0, [r0, #4]
   b4b44:	2200      	movs	r2, #0
   b4b46:	f7ff bc97 	b.w	b4478 <network_set_listen_timeout>

000b4b4a <_ZN5spark9WiFiClass6listenEb>:
        network_listen(*this, begin ? 0 : 1, NULL);
   b4b4a:	6840      	ldr	r0, [r0, #4]
   b4b4c:	2200      	movs	r2, #0
   b4b4e:	f081 0101 	eor.w	r1, r1, #1
   b4b52:	f7ff bc81 	b.w	b4458 <network_listen>

000b4b56 <_ZN5spark9WiFiClass3offEv>:
        network_off(*this, 0, 0, NULL);
   b4b56:	2300      	movs	r3, #0
   b4b58:	6840      	ldr	r0, [r0, #4]
   b4b5a:	461a      	mov	r2, r3
   b4b5c:	4619      	mov	r1, r3
   b4b5e:	f7ff bc73 	b.w	b4448 <network_off>

000b4b62 <_ZN5spark9WiFiClass2onEv>:
        network_on(*this, 0, 0, NULL);
   b4b62:	2300      	movs	r3, #0
   b4b64:	6840      	ldr	r0, [r0, #4]
   b4b66:	461a      	mov	r2, r3
   b4b68:	4619      	mov	r1, r3
   b4b6a:	f7ff bc65 	b.w	b4438 <network_on>

000b4b6e <_ZN5spark9WiFiClass10connectingEv>:
        return network_connecting(*this, 0, NULL);
   b4b6e:	2200      	movs	r2, #0
   b4b70:	6840      	ldr	r0, [r0, #4]
   b4b72:	4611      	mov	r1, r2
   b4b74:	f7ff bc48 	b.w	b4408 <network_connecting>

000b4b78 <_ZN5spark9WiFiClass10disconnectEv>:
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   b4b78:	6840      	ldr	r0, [r0, #4]
   b4b7a:	2200      	movs	r2, #0
   b4b7c:	2102      	movs	r1, #2
   b4b7e:	f7ff bc4b 	b.w	b4418 <network_disconnect>

000b4b82 <_ZN5spark9WiFiClass7connectEj>:
        network_connect(*this, flags, 0, NULL);
   b4b82:	2300      	movs	r3, #0
   b4b84:	6840      	ldr	r0, [r0, #4]
   b4b86:	461a      	mov	r2, r3
   b4b88:	f7ff bc36 	b.w	b43f8 <network_connect>

000b4b8c <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t>:
   b4b8c:	4b02      	ldr	r3, [pc, #8]	; (b4b98 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0xc>)
   b4b8e:	2204      	movs	r2, #4
   b4b90:	605a      	str	r2, [r3, #4]
            NetworkClass(NETWORK_INTERFACE_WIFI_STA) {
   b4b92:	4a02      	ldr	r2, [pc, #8]	; (b4b9c <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0x10>)
   b4b94:	601a      	str	r2, [r3, #0]
the same way.
*****************************************************************************/

    WiFiClass WiFi;
    // NetworkClass& Network = WiFi;
}
   b4b96:	4770      	bx	lr
   b4b98:	2003e70c 	.word	0x2003e70c
   b4b9c:	000b5188 	.word	0x000b5188

000b4ba0 <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_>:

void module_user_init_hook()
{
#if HAL_PLATFORM_NEWLIB
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
        _impure_ptr = r;
   b4ba0:	4b01      	ldr	r3, [pc, #4]	; (b4ba8 <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_+0x8>)
   b4ba2:	6018      	str	r0, [r3, #0]
    }, nullptr);
   b4ba4:	4770      	bx	lr
   b4ba6:	bf00      	nop
   b4ba8:	2003e640 	.word	0x2003e640

000b4bac <serialEventRun>:
{
   b4bac:	b508      	push	{r3, lr}
    if (serialEvent && Serial.available()>0)
   b4bae:	4b0b      	ldr	r3, [pc, #44]	; (b4bdc <serialEventRun+0x30>)
   b4bb0:	b143      	cbz	r3, b4bc4 <serialEventRun+0x18>
   b4bb2:	f7ff ff91 	bl	b4ad8 <_Z16_fetch_usbserialv>
   b4bb6:	6803      	ldr	r3, [r0, #0]
   b4bb8:	691b      	ldr	r3, [r3, #16]
   b4bba:	4798      	blx	r3
   b4bbc:	2800      	cmp	r0, #0
   b4bbe:	dd01      	ble.n	b4bc4 <serialEventRun+0x18>
        serialEvent();
   b4bc0:	f3af 8000 	nop.w
    if (serialEvent1 && Serial1.available()>0)
   b4bc4:	4b06      	ldr	r3, [pc, #24]	; (b4be0 <serialEventRun+0x34>)
   b4bc6:	b143      	cbz	r3, b4bda <serialEventRun+0x2e>
   b4bc8:	f000 f960 	bl	b4e8c <_Z22__fetch_global_Serial1v>
   b4bcc:	6803      	ldr	r3, [r0, #0]
   b4bce:	691b      	ldr	r3, [r3, #16]
   b4bd0:	4798      	blx	r3
   b4bd2:	2800      	cmp	r0, #0
   b4bd4:	dd01      	ble.n	b4bda <serialEventRun+0x2e>
        serialEvent1();
   b4bd6:	f3af 8000 	nop.w
}
   b4bda:	bd08      	pop	{r3, pc}
	...

000b4be4 <_post_loop>:
{
   b4be4:	b508      	push	{r3, lr}
	serialEventRun();
   b4be6:	f7ff ffe1 	bl	b4bac <serialEventRun>
		return !thread || !thread->isRunning();
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
   b4bea:	f7ff fad9 	bl	b41a0 <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
   b4bee:	4b01      	ldr	r3, [pc, #4]	; (b4bf4 <_post_loop+0x10>)
   b4bf0:	6018      	str	r0, [r3, #0]
}
   b4bf2:	bd08      	pop	{r3, pc}
   b4bf4:	2003e728 	.word	0x2003e728

000b4bf8 <_Z33system_initialize_user_backup_ramv>:
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
   b4bf8:	4805      	ldr	r0, [pc, #20]	; (b4c10 <_Z33system_initialize_user_backup_ramv+0x18>)
   b4bfa:	4a06      	ldr	r2, [pc, #24]	; (b4c14 <_Z33system_initialize_user_backup_ramv+0x1c>)
   b4bfc:	4906      	ldr	r1, [pc, #24]	; (b4c18 <_Z33system_initialize_user_backup_ramv+0x20>)
{
   b4bfe:	b508      	push	{r3, lr}
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
   b4c00:	1a12      	subs	r2, r2, r0
   b4c02:	f000 f96f 	bl	b4ee4 <memcpy>
    __backup_sram_signature = signature;
   b4c06:	4b05      	ldr	r3, [pc, #20]	; (b4c1c <_Z33system_initialize_user_backup_ramv+0x24>)
   b4c08:	4a05      	ldr	r2, [pc, #20]	; (b4c20 <_Z33system_initialize_user_backup_ramv+0x28>)
   b4c0a:	601a      	str	r2, [r3, #0]
}
   b4c0c:	bd08      	pop	{r3, pc}
   b4c0e:	bf00      	nop
   b4c10:	2003f400 	.word	0x2003f400
   b4c14:	2003f404 	.word	0x2003f404
   b4c18:	000b52e8 	.word	0x000b52e8
   b4c1c:	2003f400 	.word	0x2003f400
   b4c20:	9a271c1e 	.word	0x9a271c1e

000b4c24 <_Z27ctrl_request_custom_handlerP12ctrl_request>:
void __attribute((weak)) ctrl_request_custom_handler(ctrl_request* req) {
   b4c24:	b507      	push	{r0, r1, r2, lr}
    system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   b4c26:	2300      	movs	r3, #0
   b4c28:	9300      	str	r3, [sp, #0]
   b4c2a:	461a      	mov	r2, r3
   b4c2c:	f06f 0177 	mvn.w	r1, #119	; 0x77
   b4c30:	f7ff fbd0 	bl	b43d4 <system_ctrl_set_result>
}
   b4c34:	b003      	add	sp, #12
   b4c36:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000b4c3c <_ZL20ctrl_request_handlerP12ctrl_request>:
static void ctrl_request_handler(ctrl_request* req) {
   b4c3c:	b507      	push	{r0, r1, r2, lr}
    switch (req->type) {
   b4c3e:	8843      	ldrh	r3, [r0, #2]
   b4c40:	2b0a      	cmp	r3, #10
   b4c42:	d008      	beq.n	b4c56 <_ZL20ctrl_request_handlerP12ctrl_request+0x1a>
   b4c44:	2b50      	cmp	r3, #80	; 0x50
   b4c46:	d10b      	bne.n	b4c60 <_ZL20ctrl_request_handlerP12ctrl_request+0x24>
        if (log_process_ctrl_request_callback) {
   b4c48:	4b09      	ldr	r3, [pc, #36]	; (b4c70 <_ZL20ctrl_request_handlerP12ctrl_request+0x34>)
   b4c4a:	681b      	ldr	r3, [r3, #0]
   b4c4c:	b14b      	cbz	r3, b4c62 <_ZL20ctrl_request_handlerP12ctrl_request+0x26>
}
   b4c4e:	b003      	add	sp, #12
   b4c50:	f85d eb04 	ldr.w	lr, [sp], #4
            log_process_ctrl_request_callback(req);
   b4c54:	4718      	bx	r3
        ctrl_request_custom_handler(req);
   b4c56:	f7ff ffe5 	bl	b4c24 <_Z27ctrl_request_custom_handlerP12ctrl_request>
}
   b4c5a:	b003      	add	sp, #12
   b4c5c:	f85d fb04 	ldr.w	pc, [sp], #4
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   b4c60:	2300      	movs	r3, #0
   b4c62:	9300      	str	r3, [sp, #0]
   b4c64:	461a      	mov	r2, r3
   b4c66:	f06f 0177 	mvn.w	r1, #119	; 0x77
   b4c6a:	f7ff fbb3 	bl	b43d4 <system_ctrl_set_result>
}
   b4c6e:	e7f4      	b.n	b4c5a <_ZL20ctrl_request_handlerP12ctrl_request+0x1e>
   b4c70:	2003e718 	.word	0x2003e718

000b4c74 <module_user_init_hook>:
{
   b4c74:	b510      	push	{r4, lr}
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
   b4c76:	4812      	ldr	r0, [pc, #72]	; (b4cc0 <module_user_init_hook+0x4c>)
   b4c78:	2100      	movs	r1, #0
   b4c7a:	f7ff fc35 	bl	b44e8 <newlib_impure_ptr_callback>
#endif // HAL_PLATFORM_NEWLIB

#if HAL_PLATFORM_BACKUP_RAM
    backup_ram_was_valid_ = __backup_sram_signature == signature;
   b4c7e:	4b11      	ldr	r3, [pc, #68]	; (b4cc4 <module_user_init_hook+0x50>)
   b4c80:	681a      	ldr	r2, [r3, #0]
   b4c82:	4b11      	ldr	r3, [pc, #68]	; (b4cc8 <module_user_init_hook+0x54>)
   b4c84:	429a      	cmp	r2, r3
   b4c86:	4b11      	ldr	r3, [pc, #68]	; (b4ccc <module_user_init_hook+0x58>)
   b4c88:	bf0c      	ite	eq
   b4c8a:	2201      	moveq	r2, #1
   b4c8c:	2200      	movne	r2, #0
   b4c8e:	701a      	strb	r2, [r3, #0]
    if (!backup_ram_was_valid_) {
   b4c90:	d001      	beq.n	b4c96 <module_user_init_hook+0x22>
        system_initialize_user_backup_ram();
   b4c92:	f7ff ffb1 	bl	b4bf8 <_Z33system_initialize_user_backup_ramv>
    }
#endif

#if HAL_PLATFORM_RNG
    // Initialize the default stdlib PRNG using hardware RNG as a seed
    const uint32_t seed = HAL_RNG_GetRandomNumber();
   b4c96:	f7ff fa7b 	bl	b4190 <HAL_RNG_GetRandomNumber>
   b4c9a:	4604      	mov	r4, r0
    srand(seed);
   b4c9c:	f000 f938 	bl	b4f10 <srand>

    // If the user defines random_seed_from_cloud, call it with a seed value
    // generated by a hardware RNG as well.
    if (random_seed_from_cloud) {
   b4ca0:	4b0b      	ldr	r3, [pc, #44]	; (b4cd0 <module_user_init_hook+0x5c>)
   b4ca2:	b113      	cbz	r3, b4caa <module_user_init_hook+0x36>
        random_seed_from_cloud(seed);
   b4ca4:	4620      	mov	r0, r4
   b4ca6:	f3af 8000 	nop.w
    }
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);
   b4caa:	2100      	movs	r1, #0
   b4cac:	4808      	ldr	r0, [pc, #32]	; (b4cd0 <module_user_init_hook+0x5c>)
   b4cae:	f7ff fb9b 	bl	b43e8 <spark_set_random_seed_from_cloud_handler>

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
}
   b4cb2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
   b4cb6:	4807      	ldr	r0, [pc, #28]	; (b4cd4 <module_user_init_hook+0x60>)
   b4cb8:	2100      	movs	r1, #0
   b4cba:	f7ff bb81 	b.w	b43c0 <system_ctrl_set_app_request_handler>
   b4cbe:	bf00      	nop
   b4cc0:	000b4ba1 	.word	0x000b4ba1
   b4cc4:	2003f400 	.word	0x2003f400
   b4cc8:	9a271c1e 	.word	0x9a271c1e
   b4ccc:	2003e714 	.word	0x2003e714
   b4cd0:	00000000 	.word	0x00000000
   b4cd4:	000b4c3d 	.word	0x000b4c3d

000b4cd8 <pinAvailable>:
/*
 * @brief Perform safety check on desired pin to see if it's already
 * being used.  Return 0 if used, otherwise return 1 if available.
 */
bool pinAvailable(uint16_t pin) {
  if (pin >= TOTAL_PINS) {
   b4cd8:	2823      	cmp	r0, #35	; 0x23
bool pinAvailable(uint16_t pin) {
   b4cda:	b513      	push	{r0, r1, r4, lr}
  if (pin >= TOTAL_PINS) {
   b4cdc:	d902      	bls.n	b4ce4 <pinAvailable+0xc>
    return false;
   b4cde:	2000      	movs	r0, #0
    return false; // 'pin' is used
  }
#endif

  return true; // 'pin' is available
}
   b4ce0:	b002      	add	sp, #8
   b4ce2:	bd10      	pop	{r4, pc}
  if((pin == SCK || pin == MOSI || pin == MISO) && hal_spi_is_enabled(SPI.interface()) == true)
   b4ce4:	f1a0 030b 	sub.w	r3, r0, #11
   b4ce8:	2b02      	cmp	r3, #2
   b4cea:	d81a      	bhi.n	b4d22 <pinAvailable+0x4a>

template <hal_spi_interface_t Interface>
class SpiProxy {
public:
    static SPIClass& instance() {
        static SPIClass instance(Interface);
   b4cec:	4c17      	ldr	r4, [pc, #92]	; (b4d4c <pinAvailable+0x74>)
   b4cee:	7821      	ldrb	r1, [r4, #0]
   b4cf0:	f3bf 8f5b 	dmb	ish
   b4cf4:	f011 0101 	ands.w	r1, r1, #1
   b4cf8:	d10b      	bne.n	b4d12 <pinAvailable+0x3a>
   b4cfa:	4620      	mov	r0, r4
   b4cfc:	9101      	str	r1, [sp, #4]
   b4cfe:	f7ff f9d4 	bl	b40aa <__cxa_guard_acquire>
   b4d02:	9901      	ldr	r1, [sp, #4]
   b4d04:	b128      	cbz	r0, b4d12 <pinAvailable+0x3a>
   b4d06:	4812      	ldr	r0, [pc, #72]	; (b4d50 <pinAvailable+0x78>)
   b4d08:	f7ff fe14 	bl	b4934 <_ZN8SPIClassC1E19hal_spi_interface_t>
   b4d0c:	4620      	mov	r0, r4
   b4d0e:	f7ff f9d1 	bl	b40b4 <__cxa_guard_release>
   b4d12:	4b0f      	ldr	r3, [pc, #60]	; (b4d50 <pinAvailable+0x78>)
   b4d14:	7818      	ldrb	r0, [r3, #0]
   b4d16:	f7ff facb 	bl	b42b0 <hal_spi_is_enabled>
   b4d1a:	2800      	cmp	r0, #0
   b4d1c:	d1df      	bne.n	b4cde <pinAvailable+0x6>
  return true; // 'pin' is available
   b4d1e:	2001      	movs	r0, #1
   b4d20:	e7de      	b.n	b4ce0 <pinAvailable+0x8>
  if((pin == SCL || pin == SDA) && hal_i2c_is_enabled(Wire.interface(), nullptr) == true)
   b4d22:	2801      	cmp	r0, #1
   b4d24:	d809      	bhi.n	b4d3a <pinAvailable+0x62>
   b4d26:	f000 f871 	bl	b4e0c <_Z19__fetch_global_Wirev>
   b4d2a:	2100      	movs	r1, #0
   b4d2c:	7c00      	ldrb	r0, [r0, #16]
   b4d2e:	f7ff fa8f 	bl	b4250 <hal_i2c_is_enabled>
  if((pin == RX || pin == TX) && hal_usart_is_enabled(Serial1.interface()) == true)
   b4d32:	f080 0001 	eor.w	r0, r0, #1
   b4d36:	b2c0      	uxtb	r0, r0
   b4d38:	e7d2      	b.n	b4ce0 <pinAvailable+0x8>
   b4d3a:	3809      	subs	r0, #9
   b4d3c:	2801      	cmp	r0, #1
   b4d3e:	d8ee      	bhi.n	b4d1e <pinAvailable+0x46>
   b4d40:	f000 f8a4 	bl	b4e8c <_Z22__fetch_global_Serial1v>
   b4d44:	7c00      	ldrb	r0, [r0, #16]
   b4d46:	f7ff fae3 	bl	b4310 <hal_usart_is_enabled>
   b4d4a:	e7f2      	b.n	b4d32 <pinAvailable+0x5a>
   b4d4c:	2003e71c 	.word	0x2003e71c
   b4d50:	2003e720 	.word	0x2003e720

000b4d54 <pinMode>:
  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
   b4d54:	2823      	cmp	r0, #35	; 0x23
{
   b4d56:	b538      	push	{r3, r4, r5, lr}
   b4d58:	4604      	mov	r4, r0
   b4d5a:	460d      	mov	r5, r1
  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
   b4d5c:	d80a      	bhi.n	b4d74 <pinMode+0x20>
   b4d5e:	29ff      	cmp	r1, #255	; 0xff
   b4d60:	d008      	beq.n	b4d74 <pinMode+0x20>
  if( !pinAvailable(pin) ) {
   b4d62:	f7ff ffb9 	bl	b4cd8 <pinAvailable>
   b4d66:	b128      	cbz	r0, b4d74 <pinMode+0x20>
  hal_gpio_mode(pin, setMode);
   b4d68:	4629      	mov	r1, r5
   b4d6a:	4620      	mov	r0, r4
}
   b4d6c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  hal_gpio_mode(pin, setMode);
   b4d70:	f7ff ba26 	b.w	b41c0 <hal_gpio_mode>
}
   b4d74:	bd38      	pop	{r3, r4, r5, pc}

000b4d76 <digitalWrite>:

/*
 * @brief Sets a GPIO pin to HIGH or LOW.
 */
void digitalWrite(hal_pin_t pin, uint8_t value)
{
   b4d76:	b538      	push	{r3, r4, r5, lr}
   b4d78:	4604      	mov	r4, r0
   b4d7a:	460d      	mov	r5, r1
    PinMode mode = hal_gpio_get_mode(pin);
   b4d7c:	f7ff fa28 	bl	b41d0 <hal_gpio_get_mode>
    if (mode==PIN_MODE_NONE || is_input_mode(mode))
   b4d80:	28ff      	cmp	r0, #255	; 0xff
   b4d82:	d010      	beq.n	b4da6 <digitalWrite+0x30>
            mode == INPUT_PULLDOWN ||
   b4d84:	2806      	cmp	r0, #6
   b4d86:	d804      	bhi.n	b4d92 <digitalWrite+0x1c>
   b4d88:	234d      	movs	r3, #77	; 0x4d
   b4d8a:	fa23 f000 	lsr.w	r0, r3, r0
   b4d8e:	07c3      	lsls	r3, r0, #31
   b4d90:	d409      	bmi.n	b4da6 <digitalWrite+0x30>
        return;
  // Safety check
  if( !pinAvailable(pin) ) {
   b4d92:	4620      	mov	r0, r4
   b4d94:	f7ff ffa0 	bl	b4cd8 <pinAvailable>
   b4d98:	b128      	cbz	r0, b4da6 <digitalWrite+0x30>
    return;
  }

  hal_gpio_write(pin, value);
   b4d9a:	4629      	mov	r1, r5
   b4d9c:	4620      	mov	r0, r4
}
   b4d9e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  hal_gpio_write(pin, value);
   b4da2:	f7ff ba1d 	b.w	b41e0 <hal_gpio_write>
}
   b4da6:	bd38      	pop	{r3, r4, r5, pc}

000b4da8 <analogRead>:
int32_t analogRead(hal_pin_t pin)
{
#if !HAL_PLATFORM_RTL872X
  // Allow people to use 0-7 to define analog pins by checking to see if the values are too low.
#if defined(FIRST_ANALOG_PIN) && FIRST_ANALOG_PIN > 0
  if(pin < FIRST_ANALOG_PIN)
   b4da8:	280d      	cmp	r0, #13
{
   b4daa:	b510      	push	{r4, lr}
   b4dac:	4604      	mov	r4, r0
  {
    pin = pin + FIRST_ANALOG_PIN;
   b4dae:	bf9c      	itt	ls
   b4db0:	340e      	addls	r4, #14
   b4db2:	b2a4      	uxthls	r4, r4
  }
#endif // defined(FIRST_ANALOG_PIN) && FIRST_ANALOG_PIN > 0
#endif

  // Safety check
  if( !pinAvailable(pin) ) {
   b4db4:	4620      	mov	r0, r4
   b4db6:	f7ff ff8f 	bl	b4cd8 <pinAvailable>
   b4dba:	b150      	cbz	r0, b4dd2 <analogRead+0x2a>
    return LOW;
  }

  if(hal_pin_validate_function(pin, PF_ADC)!=PF_ADC)
   b4dbc:	2103      	movs	r1, #3
   b4dbe:	4620      	mov	r0, r4
   b4dc0:	f7ff f9f6 	bl	b41b0 <hal_pin_validate_function>
   b4dc4:	2803      	cmp	r0, #3
   b4dc6:	d104      	bne.n	b4dd2 <analogRead+0x2a>
  {
    return LOW;
  }

  return hal_adc_read(pin);
   b4dc8:	4620      	mov	r0, r4
}
   b4dca:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  return hal_adc_read(pin);
   b4dce:	f7ff ba0f 	b.w	b41f0 <hal_adc_read>
}
   b4dd2:	2000      	movs	r0, #0
   b4dd4:	bd10      	pop	{r4, pc}

000b4dd6 <__tcf_0>:
}
#endif

TwoWire& __fetch_global_Wire()
{
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   b4dd6:	4770      	bx	lr

000b4dd8 <_Z17acquireWireBufferv>:
{
   b4dd8:	b538      	push	{r3, r4, r5, lr}
	hal_i2c_config_t config = {
   b4dda:	4b0a      	ldr	r3, [pc, #40]	; (b4e04 <_Z17acquireWireBufferv+0x2c>)
   b4ddc:	6003      	str	r3, [r0, #0]
   b4dde:	2301      	movs	r3, #1
{
   b4de0:	4604      	mov	r4, r0
	hal_i2c_config_t config = {
   b4de2:	6143      	str	r3, [r0, #20]
		.rx_buffer = new (std::nothrow) uint8_t[i2c_buffer_size],
   b4de4:	4908      	ldr	r1, [pc, #32]	; (b4e08 <_Z17acquireWireBufferv+0x30>)
   b4de6:	2020      	movs	r0, #32
   b4de8:	f000 f874 	bl	b4ed4 <_ZnajRKSt9nothrow_t>
	};
   b4dec:	2520      	movs	r5, #32
   b4dee:	6060      	str	r0, [r4, #4]
		.tx_buffer = new (std::nothrow) uint8_t[i2c_buffer_size],
   b4df0:	4905      	ldr	r1, [pc, #20]	; (b4e08 <_Z17acquireWireBufferv+0x30>)
	};
   b4df2:	60a5      	str	r5, [r4, #8]
		.tx_buffer = new (std::nothrow) uint8_t[i2c_buffer_size],
   b4df4:	4628      	mov	r0, r5
   b4df6:	f000 f86d 	bl	b4ed4 <_ZnajRKSt9nothrow_t>
	};
   b4dfa:	e9c4 0503 	strd	r0, r5, [r4, #12]
}
   b4dfe:	4620      	mov	r0, r4
   b4e00:	bd38      	pop	{r3, r4, r5, pc}
   b4e02:	bf00      	nop
   b4e04:	00010018 	.word	0x00010018
   b4e08:	000b51bc 	.word	0x000b51bc

000b4e0c <_Z19__fetch_global_Wirev>:
{
   b4e0c:	b530      	push	{r4, r5, lr}
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   b4e0e:	4d0e      	ldr	r5, [pc, #56]	; (b4e48 <_Z19__fetch_global_Wirev+0x3c>)
   b4e10:	7829      	ldrb	r1, [r5, #0]
   b4e12:	f3bf 8f5b 	dmb	ish
   b4e16:	f011 0401 	ands.w	r4, r1, #1
{
   b4e1a:	b087      	sub	sp, #28
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   b4e1c:	d111      	bne.n	b4e42 <_Z19__fetch_global_Wirev+0x36>
   b4e1e:	4628      	mov	r0, r5
   b4e20:	f7ff f943 	bl	b40aa <__cxa_guard_acquire>
   b4e24:	b168      	cbz	r0, b4e42 <_Z19__fetch_global_Wirev+0x36>
   b4e26:	4668      	mov	r0, sp
   b4e28:	f7ff ffd6 	bl	b4dd8 <_Z17acquireWireBufferv>
   b4e2c:	466a      	mov	r2, sp
   b4e2e:	4621      	mov	r1, r4
   b4e30:	4806      	ldr	r0, [pc, #24]	; (b4e4c <_Z19__fetch_global_Wirev+0x40>)
   b4e32:	f7ff fbdf 	bl	b45f4 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>
   b4e36:	4628      	mov	r0, r5
   b4e38:	f7ff f93c 	bl	b40b4 <__cxa_guard_release>
   b4e3c:	4804      	ldr	r0, [pc, #16]	; (b4e50 <_Z19__fetch_global_Wirev+0x44>)
   b4e3e:	f000 f84b 	bl	b4ed8 <atexit>
	return wire;
}
   b4e42:	4802      	ldr	r0, [pc, #8]	; (b4e4c <_Z19__fetch_global_Wirev+0x40>)
   b4e44:	b007      	add	sp, #28
   b4e46:	bd30      	pop	{r4, r5, pc}
   b4e48:	2003e72c 	.word	0x2003e72c
   b4e4c:	2003e730 	.word	0x2003e730
   b4e50:	000b4dd7 	.word	0x000b4dd7

000b4e54 <__tcf_0>:
}
#endif

USARTSerial& __fetch_global_Serial1()
{
    static USARTSerial serial1(HAL_USART_SERIAL1, acquireSerial1Buffer());
   b4e54:	4770      	bx	lr
	...

000b4e58 <_Z20acquireSerial1Bufferv>:
{
   b4e58:	b538      	push	{r3, r4, r5, lr}
   b4e5a:	4604      	mov	r4, r0
    hal_usart_buffer_config_t config = {
   b4e5c:	2514      	movs	r5, #20
   b4e5e:	462a      	mov	r2, r5
   b4e60:	2100      	movs	r1, #0
   b4e62:	f000 f84d 	bl	b4f00 <memset>
   b4e66:	8025      	strh	r5, [r4, #0]
   b4e68:	2540      	movs	r5, #64	; 0x40
        .rx_buffer = new (std::nothrow) uint8_t[bufferSize],
   b4e6a:	4907      	ldr	r1, [pc, #28]	; (b4e88 <_Z20acquireSerial1Bufferv+0x30>)
    hal_usart_buffer_config_t config = {
   b4e6c:	8125      	strh	r5, [r4, #8]
        .rx_buffer = new (std::nothrow) uint8_t[bufferSize],
   b4e6e:	4628      	mov	r0, r5
    hal_usart_buffer_config_t config = {
   b4e70:	8225      	strh	r5, [r4, #16]
        .rx_buffer = new (std::nothrow) uint8_t[bufferSize],
   b4e72:	f000 f82f 	bl	b4ed4 <_ZnajRKSt9nothrow_t>
        .tx_buffer = new (std::nothrow) uint8_t[bufferSize],
   b4e76:	4904      	ldr	r1, [pc, #16]	; (b4e88 <_Z20acquireSerial1Bufferv+0x30>)
    };
   b4e78:	6060      	str	r0, [r4, #4]
        .tx_buffer = new (std::nothrow) uint8_t[bufferSize],
   b4e7a:	4628      	mov	r0, r5
   b4e7c:	f000 f82a 	bl	b4ed4 <_ZnajRKSt9nothrow_t>
    };
   b4e80:	60e0      	str	r0, [r4, #12]
}
   b4e82:	4620      	mov	r0, r4
   b4e84:	bd38      	pop	{r3, r4, r5, pc}
   b4e86:	bf00      	nop
   b4e88:	000b51bc 	.word	0x000b51bc

000b4e8c <_Z22__fetch_global_Serial1v>:
{
   b4e8c:	b530      	push	{r4, r5, lr}
    static USARTSerial serial1(HAL_USART_SERIAL1, acquireSerial1Buffer());
   b4e8e:	4d0e      	ldr	r5, [pc, #56]	; (b4ec8 <_Z22__fetch_global_Serial1v+0x3c>)
   b4e90:	7829      	ldrb	r1, [r5, #0]
   b4e92:	f3bf 8f5b 	dmb	ish
   b4e96:	f011 0401 	ands.w	r4, r1, #1
{
   b4e9a:	b087      	sub	sp, #28
    static USARTSerial serial1(HAL_USART_SERIAL1, acquireSerial1Buffer());
   b4e9c:	d111      	bne.n	b4ec2 <_Z22__fetch_global_Serial1v+0x36>
   b4e9e:	4628      	mov	r0, r5
   b4ea0:	f7ff f903 	bl	b40aa <__cxa_guard_acquire>
   b4ea4:	b168      	cbz	r0, b4ec2 <_Z22__fetch_global_Serial1v+0x36>
   b4ea6:	a801      	add	r0, sp, #4
   b4ea8:	f7ff ffd6 	bl	b4e58 <_Z20acquireSerial1Bufferv>
   b4eac:	aa01      	add	r2, sp, #4
   b4eae:	4621      	mov	r1, r4
   b4eb0:	4806      	ldr	r0, [pc, #24]	; (b4ecc <_Z22__fetch_global_Serial1v+0x40>)
   b4eb2:	f7ff fda3 	bl	b49fc <_ZN11USARTSerialC1E21hal_usart_interface_tRK25hal_usart_buffer_config_t>
   b4eb6:	4628      	mov	r0, r5
   b4eb8:	f7ff f8fc 	bl	b40b4 <__cxa_guard_release>
   b4ebc:	4804      	ldr	r0, [pc, #16]	; (b4ed0 <_Z22__fetch_global_Serial1v+0x44>)
   b4ebe:	f000 f80b 	bl	b4ed8 <atexit>
    return serial1;
}
   b4ec2:	4802      	ldr	r0, [pc, #8]	; (b4ecc <_Z22__fetch_global_Serial1v+0x40>)
   b4ec4:	b007      	add	sp, #28
   b4ec6:	bd30      	pop	{r4, r5, pc}
   b4ec8:	2003e744 	.word	0x2003e744
   b4ecc:	2003e748 	.word	0x2003e748
   b4ed0:	000b4e55 	.word	0x000b4e55

000b4ed4 <_ZnajRKSt9nothrow_t>:
   b4ed4:	f7ff b8e5 	b.w	b40a2 <_Znaj>

000b4ed8 <atexit>:
   b4ed8:	2300      	movs	r3, #0
   b4eda:	4601      	mov	r1, r0
   b4edc:	461a      	mov	r2, r3
   b4ede:	4618      	mov	r0, r3
   b4ee0:	f000 b844 	b.w	b4f6c <__register_exitproc>

000b4ee4 <memcpy>:
   b4ee4:	440a      	add	r2, r1
   b4ee6:	4291      	cmp	r1, r2
   b4ee8:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
   b4eec:	d100      	bne.n	b4ef0 <memcpy+0xc>
   b4eee:	4770      	bx	lr
   b4ef0:	b510      	push	{r4, lr}
   b4ef2:	f811 4b01 	ldrb.w	r4, [r1], #1
   b4ef6:	f803 4f01 	strb.w	r4, [r3, #1]!
   b4efa:	4291      	cmp	r1, r2
   b4efc:	d1f9      	bne.n	b4ef2 <memcpy+0xe>
   b4efe:	bd10      	pop	{r4, pc}

000b4f00 <memset>:
   b4f00:	4402      	add	r2, r0
   b4f02:	4603      	mov	r3, r0
   b4f04:	4293      	cmp	r3, r2
   b4f06:	d100      	bne.n	b4f0a <memset+0xa>
   b4f08:	4770      	bx	lr
   b4f0a:	f803 1b01 	strb.w	r1, [r3], #1
   b4f0e:	e7f9      	b.n	b4f04 <memset+0x4>

000b4f10 <srand>:
   b4f10:	b538      	push	{r3, r4, r5, lr}
   b4f12:	4b10      	ldr	r3, [pc, #64]	; (b4f54 <srand+0x44>)
   b4f14:	681d      	ldr	r5, [r3, #0]
   b4f16:	6bab      	ldr	r3, [r5, #56]	; 0x38
   b4f18:	4604      	mov	r4, r0
   b4f1a:	b9b3      	cbnz	r3, b4f4a <srand+0x3a>
   b4f1c:	2018      	movs	r0, #24
   b4f1e:	f7ff facb 	bl	b44b8 <malloc>
   b4f22:	4602      	mov	r2, r0
   b4f24:	63a8      	str	r0, [r5, #56]	; 0x38
   b4f26:	b920      	cbnz	r0, b4f32 <srand+0x22>
   b4f28:	4b0b      	ldr	r3, [pc, #44]	; (b4f58 <srand+0x48>)
   b4f2a:	480c      	ldr	r0, [pc, #48]	; (b4f5c <srand+0x4c>)
   b4f2c:	2142      	movs	r1, #66	; 0x42
   b4f2e:	f7ff fad3 	bl	b44d8 <__assert_func>
   b4f32:	490b      	ldr	r1, [pc, #44]	; (b4f60 <srand+0x50>)
   b4f34:	4b0b      	ldr	r3, [pc, #44]	; (b4f64 <srand+0x54>)
   b4f36:	e9c0 1300 	strd	r1, r3, [r0]
   b4f3a:	4b0b      	ldr	r3, [pc, #44]	; (b4f68 <srand+0x58>)
   b4f3c:	6083      	str	r3, [r0, #8]
   b4f3e:	230b      	movs	r3, #11
   b4f40:	8183      	strh	r3, [r0, #12]
   b4f42:	2100      	movs	r1, #0
   b4f44:	2001      	movs	r0, #1
   b4f46:	e9c2 0104 	strd	r0, r1, [r2, #16]
   b4f4a:	6bab      	ldr	r3, [r5, #56]	; 0x38
   b4f4c:	2200      	movs	r2, #0
   b4f4e:	611c      	str	r4, [r3, #16]
   b4f50:	615a      	str	r2, [r3, #20]
   b4f52:	bd38      	pop	{r3, r4, r5, pc}
   b4f54:	2003e640 	.word	0x2003e640
   b4f58:	000b51bd 	.word	0x000b51bd
   b4f5c:	000b51d4 	.word	0x000b51d4
   b4f60:	abcd330e 	.word	0xabcd330e
   b4f64:	e66d1234 	.word	0xe66d1234
   b4f68:	0005deec 	.word	0x0005deec

000b4f6c <__register_exitproc>:
   b4f6c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   b4f70:	f8df 80b8 	ldr.w	r8, [pc, #184]	; b502c <__register_exitproc+0xc0>
   b4f74:	4606      	mov	r6, r0
   b4f76:	f8d8 0000 	ldr.w	r0, [r8]
   b4f7a:	461f      	mov	r7, r3
   b4f7c:	460d      	mov	r5, r1
   b4f7e:	4691      	mov	r9, r2
   b4f80:	f000 f856 	bl	b5030 <__retarget_lock_acquire_recursive>
   b4f84:	4b25      	ldr	r3, [pc, #148]	; (b501c <__register_exitproc+0xb0>)
   b4f86:	681c      	ldr	r4, [r3, #0]
   b4f88:	b934      	cbnz	r4, b4f98 <__register_exitproc+0x2c>
   b4f8a:	4c25      	ldr	r4, [pc, #148]	; (b5020 <__register_exitproc+0xb4>)
   b4f8c:	601c      	str	r4, [r3, #0]
   b4f8e:	4b25      	ldr	r3, [pc, #148]	; (b5024 <__register_exitproc+0xb8>)
   b4f90:	b113      	cbz	r3, b4f98 <__register_exitproc+0x2c>
   b4f92:	681b      	ldr	r3, [r3, #0]
   b4f94:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
   b4f98:	6863      	ldr	r3, [r4, #4]
   b4f9a:	2b1f      	cmp	r3, #31
   b4f9c:	dd07      	ble.n	b4fae <__register_exitproc+0x42>
   b4f9e:	f8d8 0000 	ldr.w	r0, [r8]
   b4fa2:	f000 f847 	bl	b5034 <__retarget_lock_release_recursive>
   b4fa6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   b4faa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   b4fae:	b34e      	cbz	r6, b5004 <__register_exitproc+0x98>
   b4fb0:	f8d4 0088 	ldr.w	r0, [r4, #136]	; 0x88
   b4fb4:	b988      	cbnz	r0, b4fda <__register_exitproc+0x6e>
   b4fb6:	4b1c      	ldr	r3, [pc, #112]	; (b5028 <__register_exitproc+0xbc>)
   b4fb8:	b923      	cbnz	r3, b4fc4 <__register_exitproc+0x58>
   b4fba:	f8d8 0000 	ldr.w	r0, [r8]
   b4fbe:	f000 f838 	bl	b5032 <__retarget_lock_release>
   b4fc2:	e7f0      	b.n	b4fa6 <__register_exitproc+0x3a>
   b4fc4:	f44f 7084 	mov.w	r0, #264	; 0x108
   b4fc8:	f7ff fa76 	bl	b44b8 <malloc>
   b4fcc:	2800      	cmp	r0, #0
   b4fce:	d0f4      	beq.n	b4fba <__register_exitproc+0x4e>
   b4fd0:	2300      	movs	r3, #0
   b4fd2:	e9c0 3340 	strd	r3, r3, [r0, #256]	; 0x100
   b4fd6:	f8c4 0088 	str.w	r0, [r4, #136]	; 0x88
   b4fda:	6863      	ldr	r3, [r4, #4]
   b4fdc:	f840 9023 	str.w	r9, [r0, r3, lsl #2]
   b4fe0:	2201      	movs	r2, #1
   b4fe2:	409a      	lsls	r2, r3
   b4fe4:	eb00 0183 	add.w	r1, r0, r3, lsl #2
   b4fe8:	f8d0 3100 	ldr.w	r3, [r0, #256]	; 0x100
   b4fec:	4313      	orrs	r3, r2
   b4fee:	f8c0 3100 	str.w	r3, [r0, #256]	; 0x100
   b4ff2:	2e02      	cmp	r6, #2
   b4ff4:	f8c1 7080 	str.w	r7, [r1, #128]	; 0x80
   b4ff8:	bf02      	ittt	eq
   b4ffa:	f8d0 3104 	ldreq.w	r3, [r0, #260]	; 0x104
   b4ffe:	4313      	orreq	r3, r2
   b5000:	f8c0 3104 	streq.w	r3, [r0, #260]	; 0x104
   b5004:	6863      	ldr	r3, [r4, #4]
   b5006:	f8d8 0000 	ldr.w	r0, [r8]
   b500a:	1c5a      	adds	r2, r3, #1
   b500c:	3302      	adds	r3, #2
   b500e:	6062      	str	r2, [r4, #4]
   b5010:	f844 5023 	str.w	r5, [r4, r3, lsl #2]
   b5014:	f000 f80e 	bl	b5034 <__retarget_lock_release_recursive>
   b5018:	2000      	movs	r0, #0
   b501a:	e7c6      	b.n	b4faa <__register_exitproc+0x3e>
   b501c:	2003e7e8 	.word	0x2003e7e8
   b5020:	2003e75c 	.word	0x2003e75c
   b5024:	00000000 	.word	0x00000000
   b5028:	000b44b9 	.word	0x000b44b9
   b502c:	2003e6a4 	.word	0x2003e6a4

000b5030 <__retarget_lock_acquire_recursive>:
   b5030:	4770      	bx	lr

000b5032 <__retarget_lock_release>:
   b5032:	4770      	bx	lr

000b5034 <__retarget_lock_release_recursive>:
   b5034:	4770      	bx	lr

000b5036 <link_code_end>:
	...

000b5038 <dynalib_user>:
   b5038:	402d 000b 4069 000b 4091 000b 4095 000b     -@..i@...@...@..
   b5048:	0000 0000                                   ....

000b504c <_ZTVN5spark13EthernetClassE>:
	...
   b5054:	457f 000b 4575 000b 456b 000b 4561 000b     .E..uE..kE..aE..
   b5064:	4555 000b 4549 000b 4771 000b 4779 000b     UE..IE..qG..yG..
   b5074:	453d 000b 4535 000b 452b 000b 4521 000b     =E..5E..+E..!E..
   b5084:	47a9 000b                                   .G..

000b5088 <_ZTV7TwoWire>:
	...
   b5090:	459d 000b 45e7 000b 45bf 000b 459f 000b     .E...E...E...E..
   b50a0:	45c7 000b 45cf 000b 45d7 000b 45df 000b     .E...E...E...E..

000b50b0 <_ZTV9IPAddress>:
	...
   b50b8:	4641 000b 4631 000b 4633 000b 7061 0070     AF..1F..3F..app.

000b50c8 <_ZTVN5spark12NetworkClassE>:
	...
   b50d0:	4731 000b 473b 000b 4745 000b 474f 000b     1G..;G..EG..OG..
   b50e0:	4759 000b 4765 000b 4771 000b 4779 000b     YG..eG..qG..yG..
   b50f0:	4781 000b 478d 000b 4795 000b 479f 000b     .G...G...G...G..
   b5100:	47a9 000b 5925 252d 2d6d 6425 2554 3a48     .G..%Y-%m-%dT%H:
   b5110:	4d25 253a 2553 007a 7361 7463 6d69 0065     %M:%S%z.asctime.

000b5120 <_ZTV11USARTSerial>:
	...
   b5128:	4981 000b 49ed 000b 49c5 000b 4895 000b     .I...I...I...H..
   b5138:	4995 000b 49b1 000b 49a3 000b 49bf 000b     .I...I...I...I..
   b5148:	4983 000b 4987 000b                         .I...I..

000b5150 <_ZTV9USBSerial>:
	...
   b5158:	4a2b 000b 4a93 000b 4a69 000b 4895 000b     +J...J..iJ...H..
   b5168:	4a5b 000b 4a2d 000b 4a3d 000b 4a8d 000b     [J..-J..=J...J..
   b5178:	4a4d 000b 4a25 000b                         MJ..%J..

000b5180 <_ZTVN5spark9WiFiClassE>:
	...
   b5188:	4b83 000b 4b79 000b 4b6f 000b 4b25 000b     .K..yK..oK..%K..
   b5198:	4b63 000b 4b57 000b 4771 000b 4779 000b     cK..WK..qG..yG..
   b51a8:	4b4b 000b 4b43 000b 4b39 000b 4b2f 000b     KK..CK..9K../K..
   b51b8:	47a9 000b                                   .G..

000b51bc <_ZSt7nothrow>:
   b51bc:	5200 4545 544e 6d20 6c61 6f6c 2063 7573     .REENT malloc su
   b51cc:	6363 6565 6564 0064 742f 706d 6a2f 6e65     cceeded./tmp/jen
   b51dc:	696b 736e 472d 4343 312d 2d30 6970 6570     kins-GCC-10-pipe
   b51ec:	696c 656e 342d 5f38 3032 3032 3131 3432     line-48_20201124
   b51fc:	315f 3036 3136 3038 3336 2f39 7273 2f63     _1606180639/src/
   b520c:	656e 6c77 6269 6e2f 7765 696c 2f62 696c     newlib/newlib/li
   b521c:	6362 732f 6474 696c 2f62 6172 646e 632e     bc/stdlib/rand.c
	...

000b522d <link_const_data_end>:
   b522d:	00          	.byte	0x00
	...

000b5230 <link_constructors_location>:
   b5230:	000b4159 	.word	0x000b4159
   b5234:	000b4511 	.word	0x000b4511
   b5238:	000b4589 	.word	0x000b4589
   b523c:	000b4721 	.word	0x000b4721
   b5240:	000b4881 	.word	0x000b4881
   b5244:	000b4929 	.word	0x000b4929
   b5248:	000b4949 	.word	0x000b4949
   b524c:	000b496d 	.word	0x000b496d
   b5250:	000b4b8d 	.word	0x000b4b8d
